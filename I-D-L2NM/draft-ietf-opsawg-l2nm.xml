<?xml version="1.0" encoding="US-ASCII"?>
<!-- This template is for creating an Internet Draft using xml2rfc,
     which is available here: http://xml.resource.org. -->
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!-- One method to get references from the online citation libraries.
     There has to be one entity for each item to be referenced.
     An alternate method (rfc include) is described in the references. -->
<!ENTITY RFC2119 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC3688 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.3688.xml">
<!ENTITY RFC6020 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6020.xml">
<!ENTITY RFC6241 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6241.xml">
<!ENTITY RFC6242 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6242.xml">
<!ENTITY RFC7950 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7950.xml">
<!ENTITY RFC7432 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7432.xml">
<!ENTITY RFC8040 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8040.xml">
<!ENTITY RFC8174 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8174.xml">
<!ENTITY RFC8214 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8214.xml">
<!ENTITY RFC8309 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8309.xml">
<!ENTITY RFC8340 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8340.xml">
<!ENTITY RFC8341 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8341.xml">
<!ENTITY RFC8453 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8453.xml">
<!ENTITY RFC8466 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8466.xml">
]>
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<!-- used by XSLT processors -->
<!-- For a complete list and description of processing instructions (PIs),
     please see http://xml.resource.org/authoring/README.html. -->
<!-- Below are generally applicable Processing Instructions (PIs) that most I-Ds might want to use.
     (Here they are set differently than their defaults in xml2rfc v1.32) -->
<?rfc strict="yes" ?>
<!-- give errors regarding ID-nits and DTD validation -->
<!-- control the table of contents (ToC) -->
<?rfc toc="yes"?>
<!-- generate a ToC -->
<?rfc tocdepth="5"?>
<!-- the number of levels of subsections in ToC. default: 3 -->
<!-- control references -->
<?rfc symrefs="yes"?>
<!-- use symbolic references tags, i.e, [RFC2119] instead of [1] -->
<?rfc sortrefs="yes" ?>
<!-- sort the reference entries alphabetically -->
<!-- control vertical white space
     (using these PIs as follows is recommended by the RFC Editor) -->
<?rfc compact="yes" ?>
<!-- do not start each main section on a new page -->
<?rfc subcompact="no" ?>
<!-- keep one blank line between list items -->
<!-- end of list of popular I-D processing instructions -->
<rfc category="std" docName="draft-ietf-opsawg-l2nm-latest" ipr="trust200902">
  <!-- category values: std, bcp, info, exp, and historic
     ipr values: full3667, noModification3667, noDerivatives3667
     you can add the attributes updates="NNNN" and obsoletes="NNNN"
     they will automatically be output with "(if approved)" -->

  <!-- ***** FRONT MATTER ***** -->

  <front>
    <!-- The abbreviated title is used in the page header - it is only necessary if the
         full title is longer than 39 characters -->

    <title abbrev="L2NM">A Layer 2 VPN Network YANG Model</title>

    <!-- add 'role="editor"' below for the editors if appropriate -->

    <!-- Another author who claims to be an editor -->

    <author fullname="Samier Barguil" initials="S.B." role="editor"
            surname="Barguil">
      <organization>Telefonica</organization>

      <address>
        <postal>
          <street></street>

          <!-- Reorder these if your country does things differently -->

          <city>Madrid</city>

          <region></region>

          <code></code>

          <country>ES</country>
        </postal>

        <phone></phone>

        <email>samier.barguilgiraldo.ext@telefonica.com</email>

        <!-- uri and facsimile elements may also be added -->
      </address>
    </author>

    <author fullname="Oscar Gonzalez de Dios" initials="O.G.D" role="editor"
            surname="Gonzalez de Dios">
      <organization>Telefonica</organization>

      <address>
        <postal>
          <street></street>

          <!-- Reorder these if your country does things differently -->

          <city>Madrid</city>

          <region></region>

          <code></code>

          <country>ES</country>
        </postal>

        <phone></phone>

        <email>oscar.gonzalezdedios@telefonica.com</email>

        <!-- uri and facsimile elements may also be added -->
      </address>
    </author>

    <author fullname="Mohamed Boucadair" initials="M.B" role="editor"
            surname="Boucadair ">
      <organization>Orange</organization>

      <address>
        <postal>
          <street></street>

          <!-- Reorder these if your country does things differently -->

          <city></city>

          <region></region>

          <code></code>

          <country>France</country>
        </postal>

        <phone></phone>

        <email>mohamed.boucadair@orange.com</email>

        <!-- uri and facsimile elements may also be added -->
      </address>
    </author>

    <author fullname="Luis Angel Munoz" initials="L.A." surname="Munoz">
      <organization>Vodafone</organization>

      <address>
        <postal>
          <street></street>

          <!-- Reorder these if your country does things differently -->

          <city></city>

          <region></region>

          <code></code>

          <country>ES</country>
        </postal>

        <phone></phone>

        <email>luis-angel.munoz@vodafone.com</email>

        <!-- uri and facsimile elements may also be added -->
      </address>
    </author>

    <date day="30" month="April" year="2021" />

    <!-- Meta-data Declarations -->

    <area>ops</area>

    <workgroup>OPSAWG</workgroup>

    <!-- WG name at the upperleft corner of the doc,
         IETF is fine for individual submissions.
     If this element is not present, the default is "Network Working Group",
         which is used by the RFC Editor as a nod to the history of the IETF. -->

    <keyword>automation</keyword>

    <keyword>network model</keyword>

    <keyword>service provider</keyword>

    <keyword>service provisionning</keyword>

    <keyword>network automation</keyword>

    <keyword>service delivery</keyword>

    <!-- Keywords will be incorporated into HTML output
         files in a meta tag but they have no effect on text or nroff
         output. If you submit your draft to the RFC Editor, the
         keywords will be used for the search engine. -->

    <abstract>
      <t>This document defines an L2VPN Network YANG Model (L2NM) that can be
      used to manage the provisioning of Layer 2 Virtual Private Network (VPN)
      services within a service provider Network. The L2NM provides
      representation of the Layer 2 VPN services from a network standpoint.
      The L2NM is meant to be used by a network controller to derive the
      configuration information that will be sent to relevant network
      devices.</t>

      <t>The L2NM complements the Layer 2 Service Model by providing a
      network-centric view of the service that is internal to a service
      providers.</t>
    </abstract>

    <note title="Editorial Note (To be removed by RFC Editor)">
      <t>Please update these statements within the document with the RFC
      number to be assigned to this document:<list style="symbols">
          <t>"This version of this YANG module is part of RFC XXXX;"</t>

          <t>"RFC XXXX: Layer 2 VPN Network Model";</t>

          <t>reference: RFC XXXX</t>
        </list></t>

      <t>Please update "RFC CCCC" to the RFC number to be assigned to
      I-D.ietf-opsawg-vpn-common.</t>

      <t>Also, please update the "revision" date of the YANG modules.</t>
    </note>
  </front>

  <middle>
    <section title="Introduction">
      <t><xref target="RFC8466"></xref> defines an L2VPN Service Model (L2SM)
      YANG data model that can be used for Layer 2 Virtual Private Network
      (L2VPN) service ordering matters between customers and service providers
      (SPs). This document complements the L2SM by creating a network-centric
      view of the service: the L2VPN Network Model (L2NM). </t>

      <t>The L2NM can be exposed, for example, by a network to a service
      controller within the service providers network. In particular, the
      model can be used in the communication between the entity that interacts
      directly with the customer, the service orchestrator (either fully
      automated or a human operator), and the entity in charge of network
      orchestration and control (a.k.a., network controller/orchestrator).
      </t>

      <t>The L2NM supports additional capabilities, such as exposing
      operational parameters, transport protocols selection and precedence. It
      also serves as a multi-domain orchestration interface.</t>

      <t>This document uses the common VPN YANG module defined in <xref
      target="I-D.ietf-opsawg-vpn-common"></xref>.</t>

      <t>The YANG data models in this document conforms to the Network
      Management Datastore Architecture (NMDA) defined in <xref
      target="RFC8342"></xref>.</t>
    </section>

    <section anchor="terminology" title="Terminology">
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
      "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
      "OPTIONAL" in this document are to be interpreted as described in BCP 14
      <xref target="RFC2119"></xref> <xref target="RFC8174"></xref> when, and
      only when, they appear in all capitals, as shown here.</t>

      <t>This document assumes that the reader is familiar with the contents
      of <xref target="RFC6241"></xref>, <xref target="RFC7950"></xref>, <xref
      target="RFC8466"></xref>, <xref target="RFC8309"></xref>, and uses
      terminology from those documents.</t>

      <t>This document uses the term "network model" defined in Section 2.1 of
      <xref target="RFC8969"></xref>.</t>

      <t>The meaning of the symbols in YANG tree diagrams is <xref
      target="RFC8340"></xref>.</t>

      <t>This document uses the term "network model" defined in Section 2.1 of
      <xref target="RFC8969"></xref>.</t>

      <t>This document makes use of the following terms:</t>

      <t><list style="hanging">
          <t hangText="L2 VPN Customer Service Model (L2SM):">Describes the
          service characterization of an L2VPN that interconnects a set of
          sites from the customer's perspective. The customer service model
          does not provide details on the service provider network. The L2VPN
          customer service model is defined in <xref
          target="RFC8466"></xref>.</t>

          <t hangText="L2 VPN Service Network Model (L2NM):">Refers to the
          YANG module that describes an L2VPN service with a network-centric
          view. It contains information of the service providers network and
          might include allocated resources. Network controllers can use it to
          manage the Layer 2 VPN service configuration in the service
          providers network. The YANG module can be consumed by a service
          orchestrator to request a VPN service to a network controller or to
          expose the list of active L2VPN services.</t>

          <t hangText="Service orchestrator:">Refers to a functional entity
          that interacts with the customer of an L2VPN relying upon, e.g.,
          L2SM. The service orchestrator is responsible of the CE-PE
          attachment circuits, the PE selection, and requesting the activation
          of the L2VPN service to a network controller.</t>

          <t hangText="Network controller:">Denotes a functional entity
          responsible for the management of the service providers network.</t>

          <t hangText="VPN node:">Is an abstraction that represents a set of
          policies applied on a PE and that belong to a single VPN service. A
          VPN service involves one or more VPN nodes. The VPN node will
          identify the service providers node on which the VPN is
          deployed.</t>

          <t hangText="VPN network access:">Is an abstraction that represents
          the network interfaces that are associated to a given VPN node.
          Traffic coming from the VPN network access belongs to the VPN. The
          attachment circuits (bearers) between CEs and PEs are terminated in
          the VPN network access.</t>

          <t hangText="VPN Service Provider (SP):">Is a service providers that
          offers L2VPN-related services.</t>

          <t hangText="Service Provider Network (SP Network):">Is a network
          able to provide L2VPN-related services.</t>
        </list></t>
    </section>

    <section title="Acronyms">
      <t>The following acronyms are used in the document:<?rfc subcompact="yes" ?></t>

      <t><list hangIndent="8" style="hanging">
          <t hangText="ACL">Access Control List</t>

          <t hangText="BGP">Border Gateway Protocol</t>

          <t hangText="CE">Customer Edge</t>

          <t hangText="ES">Ethernet Segment</t>

          <t hangText="ESI">Ethernet Segment Identifier</t>

          <t hangText="EVPN">Ethernet VPN</t>

          <t hangText="L2VPN">Layer 2 Virtual Private Network</t>

          <t hangText="L2SM">L2VPN Service Model</t>

          <t hangText="L2NM">L2VPN Network Model</t>

          <t hangText="PE">Provider Edge</t>

          <t hangText="QoS">Quality of Service</t>

          <t hangText="RD">Route Distinguisher</t>

          <t hangText="RT">Route Target</t>

          <t hangText="VPLS">Virtual Private LAN Service</t>

          <t hangText="VPN">Virtual Private Network</t>

          <t hangText="VPWS">Virtual Private Wire Service</t>

          <t hangText="VRF">Virtual Routing and Forwarding</t>
        </list></t>

      <t><?rfc subcompact="no" ?></t>
    </section>

    <section anchor="ref" title="Reference Architecture">
      <t><xref target="L2SM_and_L2NM"></xref> illustrates how the L2NM is
      used. As a reminder, this figure is an expansion of the architecture
      presented in Section 3 of <xref target="RFC8466"></xref> and decomposes
      the box marked "orchestration" in that figure into three separate
      functional components called "Service Orchestration", "Network
      Orchestration", and "Domain Orchestration".</t>

      <t>The reader may refer to <xref target="RFC8309"></xref> for the
      distinction between the "Customer Service Model", the "Service Delivery
      Model", the "Network Configuration Model", and the "Device Configuration
      Model". The "Domain Orchestration" and "Config Manager" roles may be
      performed by "SDN Controllers".</t>

      <figure align="center" anchor="L2SM_and_L2NM"
              title="L2SM and L2NM Interaction">
        <artwork align="left"><![CDATA[
                          +---------------+
                          |   Customer    |
                          +-------+-------+
          Customer Service Model  |
              e.g., l2vpn-svc     |
                          +-------+-------+
                          |    Service    |
                          | Orchestration |
                          +-------+-------+
           Network Model          |
             l2vpn-ntw            |
                          +-------+-------+
                          |   Network     |
                          | Orchestration |
                          +-------+-------+
    Network Configuration Model   |
                       ___________|___________
                      |                       |
             +--------+------+       +--------+------+
             |    Domain     |       |     Domain    |
             | Orchestration |       | Orchestration |
             +---+-----------+       +--------+------+
  Device         |        |                   |
  Configuration  |        |                   |
  Model          |        |                   |
            +----+----+   |                   |
            | Config  |   |                   |
            | Manager |   |                   |
            +----+----+   |                   |
                 |        |                   |
                 | NETCONF/CLI..................
                 |        |                   |
          +------------------------------------------------+
                              Network

                         +++++++
                         + AAA +
                         +++++++

 ++++++++   Bearer    ++++++++           ++++++++      ++++++++
 + CE A + ----------- + PE A +           + PE B + ---- + CE B +
 ++++++++  Connection ++++++++           ++++++++      ++++++++

            Site A                               Site B
            ]]></artwork>
      </figure>

      <t>The customer may use various means to request a service that may
      trigger the instantiation of a L2NM. The customer may use the L2SM or
      may rely upon more abstract models to request a service that relies upon
      an L3VPN service. For example, the customer may supply an IP
      Connectivity Provisioning Profile (CPP) <xref target="RFC7297"></xref>,
      an enhanced VPN (VPN+) service <xref
      target="I-D.ietf-teas-enhanced-vpn"></xref>, or an IETF network slice
      <xref target="I-D.ietf-teas-ietf-network-slices"></xref>.</t>

      <t>Note also that both the L2SM and the L2NM may be used in the context
      of the Abstraction and Control of TE Networks (ACTN) architecture <xref
      target="RFC8453"></xref>. <xref target="l2sm_actn"></xref> shows the
      Customer Network Controller (CNC), the Multi-Domain Service Coordinator
      (MDSC), and the Provisioning Network Controller (PNC).</t>

      <figure align="center" anchor="l2sm_actn"
              title="L2SM and L2NM in the Context of ACTN">
        <artwork align="left"><![CDATA[
               +----------------------------------+
               | Customer                         |
               | +-----------------------------+  |
               | |             CNC             |  |
               | +-----------------------------+  |
               +----+-----------------------+-----+
                    |                       |
                    | L2SM                  | L2SM
                    |                       |
          +---------+---------+   +---------+---------+
          | MDSC              |   |       MDSC        |
          | +---------------+ |   |     (parent)      |
          | |    Service    | |   +---------+---------+
          | | Orchestration | |             |
          | +-------+-------+ |             | L2NM
          |         |         |             |
          |         | L2NM    |   +---------+---------+
          |         |         |   |       MDSC        |
          | +-------+-------+ |   |      (child)      |
          | |    Network    | |   +---------+---------+
          | | Orchestration | |             |
          | +---------------+ |             |
          +---------+---------+             |
                    |                       |
                    | Network Configuration |
                    |                       |
       +------------+-------+     +---------+------------+
       | Domain             |     |           Domain     |
       | Controller         |     |           Controller |
       |       +---------+  |     |    +---------+       |
       |       |   PNC   |  |     |    |   PNC   |       |
       |       +---------+  |     |    +---------+       |
       +------------+-------+     +---------+------------+
                    |                       |
                    | Device Configuration  |
                    |                       |
               +----+---+              +----+---+
               | Device |              | Device |
               +--------+              +--------+        ]]></artwork>
      </figure>
    </section>

    <section anchor="relation" title="Relation with other YANG Models">
      <t>The "ietf-vpn-common" module <xref
      target="I-D.ietf-opsawg-vpn-common"></xref> includes a set of
      identities, types, and groupings that are meant to be reused by
      VPN-related YANG modules independently of the layer (e.g., Layer 2,
      Layer 3) and the type of the module (e.g., network model, service model)
      including future revisions of existing models (e.g., <xref
      target="RFC8466"></xref>). The L2NM reuses these common types and
      groupings.</t>

      <t>Also, the L2NM uses the IANA-maintained modules "iana-bgp-l2-encaps"
      (<xref target="iana-bgp"></xref>) and "iana-pseudowire-types" (<xref
      target="iana-pw"></xref>) to identify a layer 2 encapsulation type.
      Relying upon these IANA-maintained modules is meant to provide more
      flexibility in handling new types rather than be limited by a set of
      identities defined in the L2NM itself. </t>

      <t>As discussed in <xref target="ref"></xref>, the L2NM is meant to
      manage L2VPN services within a service provider network. The module
      provides a network view of the service. Such a view is only visible
      within the service provider and is not exposed outside (to customers,
      for example). The following discusses how L2NM interfaces with other
      YANG modules:</t>

      <t><list style="hanging">
          <t hangText="L2SM:">L2NM is not a customer service model.<vspace
          blankLines="1" />The internal view of the service (i.e., L2NM) may
          be mapped to an external view which is visible to customers: L2VPN
          Service YANG data Model (L2SM) <xref target="RFC8466"></xref>.
          <vspace blankLines="1" />The L2NM can be fed with inputs that are
          requested by customers, typically, relying upon an L2SM template.
          Concretely, some parts of the L2SM module can be directly mapped
          into L2NM while other parts are generated as a function of the
          requested service and local guidelines. Finally, there are parts
          local to the service provider and do not map directly to
          L2SM.<vspace blankLines="1" />Note that the use of L2NM within a
          service provider does not assume nor preclude exposing the VPN
          service via the L2SM. This is deployment-specific. Nevertheless, the
          design of L2NM tries to align as much as possible with the features
          supported by the L2SM to ease grafting both L2NM and L2SM for the
          sake of highly automated VPN service provisioning and delivery.</t>

          <t hangText="Network Topology Modules:">An L2VPN involves nodes that
          are part of a topology managed by the service provider network. Such
          topology can be represented using the network topology module in
          <xref target="RFC8345"></xref>.</t>

          <t hangText="Device Modules:">L2NM is not a device model. <vspace
          blankLines="1" />Once a global VPN service is captured by means of
          the L2NM, the actual activation and provisioning of the VPN service
          will involve a variety of device modules to tweak the required
          functions for the delivery of the service. These functions are
          supported by the VPN nodes and can be managed using device YANG
          modules. A non-comprehensive list of such device YANG modules is
          provided below:<list style="symbols">
              <t>Interfaces <xref target="RFC8343"></xref>.</t>

              <t>BGP <xref target="I-D.ietf-idr-bgp-model"></xref>.</t>

              <t>ACLs <xref target="RFC8519"></xref>.</t>
            </list><vspace blankLines="1" />How the L2NM is used to derive
          device-specific actions is implementation-specific.</t>
        </list></t>
    </section>

    <section anchor="design_data_model"
             title="Description of the L2NM YANG Module ">
      <t>The L2NM ('ietf-l2vpn-ntw', <xref target="YANG_module"></xref>) is
      meant to manage L2VPNs within a service provider network. In particular,
      the 'ietf-l2vpn-ntw' module can be used to create, modify, and retrieve
      L2VPN services in a network controller. The module is designed to
      minimize the amount of customer-related information.</t>

      <t>The full tree diagram of the module can be generated using the
      "pyang" tool <xref target="PYANG"></xref>. That tree is not included
      here because it is too long (Section 3.3 of <xref
      target="RFC8340"></xref>). Instead, subtrees are provided for the
      reader's convenience.</t>

      <section anchor="structure_model"
               title="Overall Structure of the Module">
        <t>The 'ietf-l2vpn-ntw' module uses two main containers:
        'vpn-services' and 'vpn-profiles' (see <xref
        target="ietf-l2vpn-ntw_tree"></xref>).</t>

        <t>The 'vpn-profiles' container is used by the provider to maintain a
        set of common VPN profiles that apply to one or several VPN services
        (<xref target="vpn_profiles"></xref>).</t>

        <t>The 'vpn-services' container maintains the set of L2VPN services
        managed in the service providers network. The module allows to create
        a new L2VPN service by adding a new instance of 'vpn-service'. The
        'vpn-service' is the data structure that abstracts the VPN
        Service.</t>

        <figure align="center" anchor="ietf-l2vpn-ntw_tree"
                title="Overall L2NM Tree Structure">
          <artwork align="center"><![CDATA[module: ietf-l2vpn-ntw
  +--rw l2vpn-ntw
     +--rw vpn-profiles
     |  ...
     +--rw vpn-services
        +--rw vpn-service* [vpn-id]
           ...
           +--rw vpn-nodes
              +--rw vpn-node* [vpn-node-id]
                 ...
                 +--rw vpn-network-accesses
                    +--rw vpn-network-access* [id]
                       ...     ]]></artwork>
        </figure>
      </section>

      <section anchor="vpn_profiles" title="VPN Profiles">
        <t>The 'vpn-profiles' container (<xref
        target="vpn_profiles_tree"></xref>) allows the VPN service provider to
        define and maintain a set of VPN profiles <xref
        target="I-D.ietf-opsawg-vpn-common"></xref> that apply to one or
        several VPN services.</t>

        <t>This document does not make any assumption about the exact
        definition of these profiles. The exact definition of the profiles is
        local to each VPN service provider. The model only includes an
        identifier to these profiles in order to ease identifying and binding
        local policies when building a VPN service. As shown in <xref
        target="vpn_profiles_tree"></xref>, the following identifiers can be
        included:<list style="hanging">
            <t hangText="'external-connectivity-identifier':">This identifier
            refers to a profile that defines the external connectivity
            provided to a VPN service (or a subset of VPN sites). An external
            connectivity may be an access to the Internet or a restricted
            connectivity such as access to a public/private cloud.</t>

            <t hangText="'encryption-profile-identifier':">An encryption
            profile refers to a set of policies related to the encryption
            schemes and setup that can be applied when building and offering a
            VPN service.</t>

            <t hangText="'qos-profile-identifier':">A Quality of Service (QoS)
            profile refers to as set of policies such as classification,
            marking, and actions (e.g., <xref target="RFC3644"></xref>).</t>

            <t hangText="'bfd-profile-identifier':">A Bidirectional Forwarding
            Detection (BFD) profile refers to a set of BFD <xref
            target="RFC5880"></xref> policies that can be invoked when
            building a VPN service.</t>

            <t hangText="'forwarding-profile-identifier':">A forwarding
            profile refers to the policies that apply to the forwarding of
            packets conveyed within a VPN. Such policies may consist, for
            example, at applying Access Control Lists (ACLs).</t>

            <t hangText="'routing-profile-identifier':">A routing profile
            refers to a set of routing policies that will be invoked (e.g.,
            BGP policies) when delivering the VPN service.</t>
          </list></t>

        <figure align="center" anchor="vpn_profiles_tree"
                title="VPN Profiles Subtree Structure">
          <artwork align="center"><![CDATA[  +--rw l2vpn-ntw
     +--rw vpn-profiles
     |  +--rw valid-provider-identifiers
     |     +--rw external-connectivity-identifier* [id]
     |     |       {external-connectivity}?
     |     |  +--rw id    string
     |     +--rw encryption-profile-identifier* [id]
     |     |  +--rw id    string
     |     +--rw qos-profile-identifier* [id]
     |     |  +--rw id    string
     |     +--rw bfd-profile-identifier* [id]
     |     |  +--rw id    string
     |     +--rw forwarding-profile-identifier* [id]
     |     |  +--rw id    string
     |     +--rw routing-profile-identifier* [id]
     |        +--rw id    string
     +--rw vpn-services
        ...                   ]]></artwork>
        </figure>

        <t></t>

        <t></t>
      </section>

      <section anchor="l2_vpn_service" title="VPN Services">
        <t>The 'vpn-service' is the data structure that abstracts a VPN
        service in the service provider network. Each 'vpn-service' is
        uniquely identified by an identifier: 'vpn-id'. Such 'vpn-id' is only
        meaningful locally within the network controller. The subtree of the
        'vpn-services' is shown in <xref
        target="vpn-service_tree"></xref>.</t>

        <figure align="center" anchor="vpn-service_tree"
                title="VPN Services Subtree">
          <artwork align="center"><![CDATA[     +--rw vpn-services
        +--rw vpn-service* [vpn-id]
           +--rw vpn-id                        vpn-common:vpn-id
           +--rw vpn-name?                     string
           +--rw vpn-description?              string
           +--rw customer-name?                string
           +--rw parent-service-id?            vpn-common:vpn-id
           +--rw vpn-type?                     identityref
           +--rw vpn-service-topology?         identityref
           +--rw bgp-ad-enabled?               boolean
           +--rw signaling-type?               identityref
           +--rw global-parameters-profiles
           |  ...
           +--rw ethernet-segments
           |  +--rw ethernet-segment* [name]
           |     +--rw name                                 string
           |     +--rw esi-type?
           |     |       identityref
           |     +--rw (esi-choice)?
           |     |  +--:(directly-assigned)
           |     |  |  +--rw ethernet-segment-identifier?
           |     |  |          yang:hex-string
           |     |  +--:(auto-assigned)
           |     |     +--rw esi-auto
           |     |        +--rw (auto-mode)?
           |     |        |  +--:(from-pool)
           |     |        |  |  +--rw esi-pool-name?
           |     |        |  |          string
           |     |        |  +--:(full-auto)
           |     |        |     +--rw auto?
           |     |        |             empty
           |     |        +--ro auto-ethernet-segment-identifier?
           |     |                yang:hex-string
           |     +--rw esi-redundancy-mode?
           |     |       identityref
           |     +--rw df-election
           |     |  +--rw df-election-method?   identityref
           |     |  +--rw preference?           uint16
           |     |  +--rw revertive?            boolean
           |     |  +--rw election-wait-time?   uint32
           |     +--rw split-horizon-filtering?             boolean
           +--rw underlay-transport
           |  +--rw (type)?
           |     +--:(abstract)
           |     |  +--rw transport-instance-id?   string
           |     |  +--rw instance-type?           identityref
           |     +--:(protocol)
           |        +--rw protocol*                identityref
           +--rw status
           |  +--rw admin-status
           |  |  +--rw status?         identityref
           |  |  +--rw last-updated?   yang:date-and-time
           |  +--ro oper-status
           |     +--ro status?         identityref
           |     +--ro last-updated?   yang:date-and-time
           +--rw vpn-nodes
              ...     ]]></artwork>
        </figure>

        <t>The description of the VPN service data nodes that are depicted in
        <xref target="vpn-service_tree"></xref> are as follows: <list
            style="hanging">
            <t hangText="'vpn-id':">Is an identifier that is used to uniquely
            identify the L2VPN service within L2NM scope.</t>

            <t hangText="'vpn-name':">Associates a name with the service in
            order to facilitate the identification of the service.</t>

            <t hangText="'vpn-description':">Includes a textual description of
            the service. <vspace blankLines="1" />The internal structure of a
            VPN description is local to each VPN service provider.</t>

            <t hangText="'customer-name':">Indicates the name of the customer
            who ordered the service.</t>

            <t hangText="'parent-service-id':">Refers to an identifier of the
            parent service (e.g, L2SM, IETF network slice, VPN+) that
            triggered the creation of the VPN service. This identifier is used
            to easily correlate the (network) service as built in the network
            with a service order. A controller can use that correlation to
            enrich or populate some fields (e.g., description fields) as a
            function of local deployments.</t>

            <t hangText="'vpn-type':">Indicates the VPN type. Typically, the
            following types can be used for the L2NM <xref
            target="I-D.ietf-opsawg-vpn-common"></xref>:<list style="hanging">
                <t hangText="'vpls': ">Virtual Private LAN Service (VPLS) as
                defined in <xref target="RFC4761"></xref> or <xref
                target="RFC4762"></xref>.</t>

                <t hangText="'vpws': ">Virtual Private Wire Service (VPWS) as
                defined in Section 3.1.1 of <xref
                target="RFC4664"></xref>.</t>

                <t hangText="'vpws-evpn': ">VPWS as defined in <xref
                target="RFC8214"></xref>.</t>

                <t hangText="'pbb-evpn': ">Provider Backbone Bridging (PBB)
                EVPNs as defined in <xref target="RFC7623"></xref>.</t>

                <t hangText="'mpls-evpn': ">MPLS-based EVPNs <xref
                target="RFC7432"></xref>.</t>

                <t hangText="'vxlan-evpn': ">VXLAN based EVPNs <xref
                target="RFC8365"></xref>.</t>
              </list></t>

            <t hangText="'vpn-service-topology':">Indicates the network
            topology for the service: hub-spoke, any-to-any, or custom.</t>

            <t hangText="'bgp-ad-enabled':">xxxxxxxxxxxxxx</t>

            <t hangText="'signaling-type':">xxxxxxxxxxxxxxxxxx</t>

            <t hangText="'global-parameters-profiles':">Defines reusable
            parameters for the same 'vpn-service'. <vspace
            blankLines="1" />More details are provided in <xref
            target="profile"></xref>.</t>

            <t hangText="'ethernet-segments':">xxxxxxxxxxxxxxxxxx<vspace
            blankLines="1" />More details are provided in <xref
            target="es"></xref>.</t>

            <t hangText="'underlay-transport':">Describes the preference for
            the transport technology to carry the traffic of the VPN service.
            This preference is especially useful in networks with multiple
            domains and Network-to-Network Interface (NNI) types. The underlay
            transport can be expressed as an abstract transport instance
            (e.g., an identifier of a VPN+ instance, a virtual network
            identifier, or a network slice name) or as an ordered list of the
            actual protocols to be enabled in the network. <vspace
            blankLines="1" />A rich set of protocol identifiers that can be
            used to refer to an underlay transport are defined in <xref
            target="I-D.ietf-opsawg-vpn-common"></xref>.</t>

            <t hangText="'status':">Is used to track the service status of a
            given VPN service. Both operational and administrative status are
            maintained together with a timestamp. For example, a service can
            be created, but not put into effect.<vspace
            blankLines="1" />Administrative and operational status can be used
            as a trigger to detect service anomalies. For example, a service
            that is declared at the service layer as being active but still
            inactive at the network layer is an indication that network
            provision actions are needed to align the observed service status
            with the expected service status.</t>

            <t hangText="'vpn-node':">Is an abstraction that represents a set
            of policies applied to a network node and that belong to a single
            'vpn-service'. A VPN service is typically built by adding
            instances of 'vpn-node' to the 'vpn-nodes' container. <vspace
            blankLines="1" />A 'vpn-node' contains 'vpn-network-accesses',
            which are the interfaces attached to the VPN by which the customer
            traffic is received. Therefore, the customer sites are connected
            to the 'vpn-network-accesses'.<vspace blankLines="1" />Note that,
            as this is a network data model, the information about customers
            sites is not required in the model. Such information is rather
            relevant in the L2SM. Whether that information is included in the
            L2NM, e.g., to populate the various 'description' data node is
            implementation specific. <vspace blankLines="1" />More details are
            provided in <xref target="vpn_node"></xref>.</t>
          </list></t>

        <section anchor="profile" title="Global Parameters Profiles">
          <t>The 'global-parameters-profile' defines reusable parameters for
          the same 'vpn-service'. A 'global-parameters-profile' contains
          'profile-ids', which is a list of 'profile-id', which is the
          identifier of the global parameters profiles.</t>

          <figure align="center" anchor="global_param_prof_tree"
                  title="Global Parameters Profiles Subtree">
            <artwork align="center"><![CDATA[  +--rw l2vpn-ntw
     +--rw vpn-profiles
     |  ...
     +--rw vpn-services
        +--rw vpn-service* [vpn-id]
           ...
           +--rw global-parameters-profiles
           |  +--rw global-parameters-profile* [profile-id]
           |     +--rw profile-id                  string
           |     +--rw (rd-choice)?
           |     |  +--:(directly-assigned)
           |     |  |  +--rw rd?
           |     |  |          rt-types:route-distinguisher
           |     |  +--:(directly-assigned-suffix)
           |     |  |  +--rw rd-suffix?            uint16
           |     |  +--:(auto-assigned)
           |     |  |  +--rw rd-auto
           |     |  |     +--rw (auto-mode)?
           |     |  |     |  +--:(from-pool)
           |     |  |     |  |  +--rw rd-pool-name?   string
           |     |  |     |  +--:(full-auto)
           |     |  |     |     +--rw auto?           empty
           |     |  |     +--ro auto-assigned-rd?
           |     |  |             rt-types:route-distinguisher
           |     |  +--:(auto-assigned-suffix)
           |     |  |  +--rw rd-auto-suffix
           |     |  |     +--rw (auto-mode)?
           |     |  |     |  +--:(from-pool)
           |     |  |     |  |  +--rw rd-pool-name?        string
           |     |  |     |  +--:(full-auto)
           |     |  |     |     +--rw auto?                empty
           |     |  |     +--ro auto-assigned-rd-suffix?   uint16
           |     |  +--:(no-rd)
           |     |     +--rw no-rd?                empty
           |     +--rw vpn-target* [id]
           |     |  +--rw id                   int8
           |     |  +--rw route-targets* [route-target]
           |     |  |  +--rw route-target    rt-types:route-target
           |     |  +--rw route-target-type
           |     |          rt-types:route-target-type
           |     +--rw vpn-policies
           |     |  +--rw import-policy?   string
           |     |  +--rw export-policy?   string
           |     +--rw local-autonomous-system?    inet:as-number
           |     +--rw svc-mtu?                    uint32
           |     +--rw ce-vlan-preservation?       boolean
           |     +--rw ce-vlan-cos-perservation?   boolean
           |     +--rw control-word-negotiation?   boolean
           |     +--rw mac-policies
           |     |  +--rw mac-addr-limit
           |     |  |  +--rw mac-num-limit?   uint16
           |     |  |  +--rw time-interval?   uint32
           |     |  |  +--rw action?          identityref
           |     |  +--rw mac-loop-prevention
           |     |     +--rw window?            uint32
           |     |     +--rw frequency?         uint32
           |     |     +--rw retry-timer?       uint32
           |     |     +--rw protection-type?   identityref
           |     +--rw multicast-like {vpn-common:multicast}?
           |        +--rw enabled?                 boolean
           |        +--rw customer-tree-flavors
           |           +--rw tree-flavor*   identityref
                    ...             ]]></artwork>
          </figure>

          <t>The description of the Global Parameters Profile that are
          depicted in <xref target="global_param_prof_tree"></xref> are as
          follows:</t>

          <t><list style="hanging">
              <t hangText="'profile-id':">XXX</t>

              <t hangText="'svc-mtu':">Service MTU, it is also known as t he
              maximum transmission unit or maximum frame size. When a frame is
              larger than the MTU, it is fragmented to accommodate the MTU of
              the network.</t>

              <t hangText="'ce-vlan-preservation':">Preserve the CE-VLAN ID
              from ingress to egress,i.e., CE-VLAN tag of the egress frame are
              identical to those of the ingress frame that yielded this egress
              service frame. If All-to-One bundling within a site is Enabled,
              then preservation applies to all Ingress service frames. If
              All-to-One bundling is disabled, then preservation applies to
              tagged Ingress service frames having CE-VLAN ID 1 through
              4094.</t>

              <t hangText="'ce-vlan-cos-perservation':">CE vlan CoS
              preservation. PCP bits in the CE-VLAN tag of the egress frame
              are identical to those of the ingress frame that yielded this
              egress service frame.</t>

              <t hangText="'control-word-negotiation':">Controls whether
              control-word negotiation is enabled (if set to true) or not (if
              set to false). Refer to Section 7 of <xref
              target="RFC8077"></xref> for more details.</t>

              <t hangText="'mac-policies':">It is a container of MAC
              policies.<list style="hanging">
                  <t hangText="'mac-addr-limit':">It is a container of
                  MAC-Addr limit configuration.<list style="hanging">
                      <t hangText="'mac-num-limit':">Maximum number of MAC
                      addresses learned from the customer for a single service
                      instance.</t>

                      <t hangText="'time-interval':">The aging time of the mac
                      address.</t>

                      <t hangText="'action':">Specifies the action when the
                      upper limit is exceeded: drop the packet, flood the
                      packet, or simply send a warning log message.</t>
                    </list></t>

                  <t hangText="'mac-loop-prevention':">Container for MAC loop
                  prevention.<list style="hanging">
                      <t hangText="'window':">The timer when a MAC mobility
                      event is detected.</t>

                      <t hangText="'frequency':">The number of times to detect
                      MAC duplication, where a 'duplicate MAC address'
                      situation has occurred and the duplicate MAC address has
                      been added to a list of duplicate MAC addresses.</t>

                      <t hangText="'retry-timer':">The retry timer. When the
                      retry timer expires, the duplicate MAC address will be
                      flushed from the MAC-VRF.</t>

                      <t hangText="'protection-type':">It defines the
                      protection type</t>
                    </list></t>
                </list></t>

              <t hangText="multicast-like':">XXX</t>
            </list></t>
        </section>

        <section anchor="es" title="Ethernet Segments">
          <t>xxx</t>

          <t><figure align="center" anchor="es-tree"
              title="Ethernet Segments Subtree">
              <artwork align="center"><![CDATA[  +--rw l2vpn-ntw
     +--rw vpn-profiles
     |  ...
     +--rw vpn-services
        +--rw vpn-service* [vpn-id]
           ...
           +--rw ethernet-segments
           |  +--rw ethernet-segment* [name]
           |     +--rw name                                 string
           |     +--rw esi-type?                       identityref
           |     +--rw (esi-choice)?
           |     |  +--:(directly-assigned)
           |     |  |  +--rw ethernet-segment-identifier?
           |     |  |          yang:hex-string
           |     |  +--:(auto-assigned)
           |     |     +--rw esi-auto
           |     |        +--rw (auto-mode)?
           |     |        |  +--:(from-pool)
           |     |        |  |  +--rw esi-pool-name?
           |     |        |  |          string
           |     |        |  +--:(full-auto)
           |     |        |     +--rw auto?
           |     |        |             empty
           |     |        +--ro auto-ethernet-segment-identifier?
           |     |                yang:hex-string
           |     +--rw esi-redundancy-mode?
           |     |       identityref
           |     +--rw df-election
           |     |  +--rw df-election-method?   identityref
           |     |  +--rw preference?           uint16
           |     |  +--rw revertive?            boolean
           |     |  +--rw election-wait-time?   uint32
           |     +--rw split-horizon-filtering?             boolean
                    ...             ]]></artwork>
            </figure></t>
        </section>

        <section anchor="vpn_node" title="VPN Node">
          <t>The 'vpn-node' is an abstraction that represents a set of
          policies/configurations applied to a network node and that belong to
          a single 'vpn-service'. A 'vpn-node' contains
          'vpn-network-accesses', which are the interfaces involved in the
          creation of the VPN. The customer sites are connected to the
          'vpn-network-accesses'.</t>

          <figure align="right" anchor="vpn-node_tree"
                  title="VPN Nodes Subtree">
            <artwork align="center"><![CDATA[  +--rw l2vpn-ntw
     +--rw vpn-profiles
     |  ...
     +--rw vpn-services
        +--rw vpn-service* [vpn-id]
           ...
           +--rw vpn-nodes
              +--rw vpn-node* [vpn-node-id]
                 +--rw vpn-node-id            vpn-common:vpn-id
                 +--rw description?           string
                 +--rw ne-id?                 string
                 +--rw role?                  identityref
                 +--rw router-id?             rt-types:router-id
                 +--rw active-global-parameters-profiles
                 |  +--rw global-parameters-profile* [profile-id]
                 |     +--rw profile-id                  leafref
                 |     +--rw local-autonomous-system?
                 |     |       inet:as-number
                 |     +--rw svc-mtu?                    uint32
                 |     +--rw ce-vlan-preservation?       boolean
                 |     +--rw ce-vlan-cos-perservation?   boolean
                 |     +--rw control-word-negotiation?   boolean
                 |     +--rw mac-policies
                 |     |  +--rw mac-addr-limit
                 |     |  |  +--rw mac-num-limit?   uint16
                 |     |  |  +--rw time-interval?   uint32
                 |     |  |  +--rw action?          identityref
                 |     |  +--rw mac-loop-prevention
                 |     |     +--rw window?            uint32
                 |     |     +--rw frequency?         uint32
                 |     |     +--rw retry-timer?       uint32
                 |     |     +--rw protection-type?   identityref
                 |     +--rw multicast-like {vpn-common:multicast}?
                 |        +--rw enabled?                 boolean
                 |        +--rw customer-tree-flavors
                 |           +--rw tree-flavor*   identityref
                 +--rw status
                 |  +--rw admin-status
                 |  |  +--rw status?         identityref
                 |  |  +--rw last-updated?   yang:date-and-time
                 |  +--rw oper-status
                 |     +--ro status?         identityref
                 |     +--ro last-updated?   yang:date-and-time
                 +--rw bgp-auto-discovery
                 +--rw signaling-option
                 |  ...
                 +--rw vpn-network-accesses
                    ...             ]]></artwork>
          </figure>

          <t>In reference to the subtree shown in <xref
          target="vpn-node_tree"></xref>, the description of VPN node data
          nodes is as follows:<list style="hanging">
              <t hangText="'vpn-node-id':">Is an identifier that uniquely
              identifies a node that enables a VPN network access.</t>

              <t hangText="'description':">Provides a textual description of
              the VPN node.</t>

              <t hangText="'ne-id':">Includes a unique identifier of the
              network element where the VPN node is deployed.</t>

              <t hangText="'router-id':"></t>

              <t hangText="'active-global-parameters-profiles':">Lists the set
              of active global VPN parameters profiles for this VPN node.
              Concretely, one or more global profiles that are defined at the
              VPN service level can be activated at the VPN node level; each
              of these profiles is uniquely identified by means of
              'profile-id'. The structure of
              'active-global-parameters-profiles' is the same as the one
              discussed in <xref target="profile"></xref>.<vspace
              blankLines="1" />Values defined in
              'active-global-parameters-profiles' overrides the ones defined
              in the VPN service level.</t>

              <t hangText="'signaling-options':">See <xref
              target="signaling_options"></xref>.</t>

              <t hangText="'status':">Tracks the status of a node involved in
              a VPN service. Both operational and administrative status are
              maintained. A mismatch between the administrative status vs. the
              operational status can be used as a trigger to detect
              anomalies.</t>

              <t hangText="'vpn-network-accesses':">Represents the point to
              which sites are connected. <vspace blankLines="1" />Note that,
              unlike in L2SM, the L2NM does not need to model the customer
              site, only the points where the traffic from the site are
              received (i.e., the PE side of PE-CE connections). Hence, the
              VPN network access contains the connectivity information between
              the provider's network and the customer premises. The VPN
              profiles ('vpn-profiles') have a set of routing policies that
              can be applied during the service creation. <vspace
              blankLines="1" />See <xref target="sna"></xref> for more
              details.</t>
            </list></t>

          <section title="BGP Auto-Discovery">
            <t></t>

            <t><figure align="right" anchor="bgpad-tree"
                title="BGP Auto-Discovery Subtree">
                <artwork align="center"><![CDATA[  +--rw l2vpn-ntw
     +--rw vpn-profiles
     |  ...
     +--rw vpn-services
        +--rw vpn-service* [vpn-id]
           ...
           +--rw vpn-nodes
              +--rw vpn-node* [vpn-node-id]
                 ...
                 +--rw bgp-auto-discovery
                 |  +--rw (bgp-type)?
                 |  |  +--:(l2vpn-bgp)
                 |  |  |  +--rw vpn-id?
                 |  |  |          vpn-common:vpn-id
                 |  |  +--:(evpn-bgp)
                 |  |     +--rw evpn-type?           identityref
                 |  |     +--rw auto-rt-enable?      boolean
                 |  |     +--ro auto-route-target?
                 |  |             rt-types:route-target
                 |  +--rw (rd-choice)?
                 |  |  +--:(directly-assigned)
                 |  |  |  +--rw rd?
                 |  |  |          rt-types:route-distinguisher
                 |  |  +--:(directly-assigned-suffix)
                 |  |  |  +--rw rd-suffix?           uint16
                 |  |  +--:(auto-assigned)
                 |  |  |  +--rw rd-auto
                 |  |  |     +--rw (auto-mode)?
                 |  |  |     |  +--:(from-pool)
                 |  |  |     |  |  +--rw rd-pool-name?   string
                 |  |  |     |  +--:(full-auto)
                 |  |  |     |     +--rw auto?           empty
                 |  |  |     +--ro auto-assigned-rd?
                 |  |  |             rt-types:route-distinguisher
                 |  |  +--:(auto-assigned-suffix)
                 |  |  |  +--rw rd-auto-suffix
                 |  |  |     +--rw (auto-mode)?
                 |  |  |     |  +--:(from-pool)
                 |  |  |     |  |  +--rw rd-pool-name?        string
                 |  |  |     |  +--:(full-auto)
                 |  |  |     |     +--rw auto?                empty
                 |  |  |     +--ro auto-assigned-rd-suffix?   uint16
                 |  |  +--:(no-rd)
                 |  |     +--rw no-rd?               empty
                 |  +--rw vpn-target* [id]
                 |  |  +--rw id                   int8
                 |  |  +--rw route-targets* [route-target]
                 |  |  |  +--rw route-target    rt-types:route-target
                 |  |  +--rw route-target-type
                 |  |          rt-types:route-target-type
                 |  +--rw vpn-policies
                 |     +--rw import-policy?   string
                 |     +--rw export-policy?   string
                 +--rw signaling-option
                 |  ...
                 +--rw vpn-network-accesses
                    ...             ]]></artwork>
              </figure></t>
          </section>

          <section anchor="signaling_options" title="Signaling Option">
            <t>This sub-tree defines the L2VPN service type, according to the
            several signaling options to exchange membership information
            between PEs of an L2VPN. The following signaling options are
            supported:</t>

            <t><list style="hanging">
                <t hangText="'l2vpn-bgp':">The service is a Multipoint VPLSs
                that use a BGP control plane as described in <xref
                target="RFC4761"></xref> and <xref target="RFC6624"></xref>.
                For this L2VPN service, the model allows configuring the Route
                Distinguisher, the Route Targets, the PWE encapsulation type
                and the MTU configurations to allow MTU mismatch.</t>

                <t hangText="'evpn-bgp':">The service is a Multipoint VPLSs
                that use also a BGP control plane but also includes the
                additional features and related parameters <xref
                target="RFC7432"></xref> and <xref target="RFC7209"></xref>.
                The model allows the configuration of the EVPN service
                interface type, the local and remote VPWS Service Instance
                (VSI) <xref target="RFC8214"></xref>, the EVPN policies for
                handling MAC addresses and the Ethernet Segment Identifier
                (ESI) information.</t>

                <t hangText="'t-ldp-pwe':">A Multipoint VPLSs that use a mesh
                of LDP-signaled Pseudowires <xref target="RFC6074"></xref>.
                The model allows configuring the T-LDP PWE type, MTU mismatch
                and the list of AC and PW bindings.</t>

                <t hangText="'l2tp-pwe':">The L2NM uses L2TP-signaled
                Pseudowires as described in <xref target="RFC6074"></xref>.
                The model allows configuring
                &lt;&lt;&lt;&lt;TBC&gt;&gt;&gt;&gt;&gt;.</t>
              </list></t>

            <texttable anchor="service-sig"
                       title="Valid Signaling Options per Service Type">
              <ttcol>Service Type</ttcol>

              <ttcol>Signaling Options</ttcol>

              <c>vpls</c>

              <c>t-ldp-pwe, l2tp-pwe, l2vpn-bgp</c>

              <c>vpws</c>

              <c>t-ldp-pwe, l2tp-pwe</c>

              <c>vpws-evpn</c>

              <c>evpn-bgp</c>

              <c>pbb-evpn</c>

              <c>evpn-bgp</c>

              <c>mpls-evpn</c>

              <c>evpn-bgp</c>

              <c>vxlan-evpn</c>

              <c>evpn-bgp</c>
            </texttable>

            <figure align="right" anchor="signaling_options_tree"
                    title="Signaling Option Subtree">
              <artwork align="center"><![CDATA[...
+--rw vpn-nodes
   +--rw vpn-node* [vpn-node-id]
   ...
   +--rw signaling-option
   |  +--rw mtu-pw?               uint16
   |  +--rw mtu-allow-mismatch?   boolean
   |  +--rw type?                                 leafref
   |  +--rw (signaling-option)?
   |     +--:(bgp)
   |     |  +--rw (bgp-type)?
   |     |     +--:(l2vpn-bgp)
   |     |     |  +--rw ce-id?
   |     |     |  |       uint16
   |     |     |  +--rw ce-range?
   |     |     |  |       uint16
   |     |     |  +--rw pw-encapsulation-type?
   |     |     |          identityref
   |     |     +--:(evpn-bgp)
   |     |        +--rw evpn-type?                leafref
   |     |        +--rw service-interface-type?
   |     |        |       identityref
   |     |        +--rw evpn-policies
   |     |           +--rw mac-learning-mode?
   |     |           |       identityref
   |     |           +--rw ingress-replication?
   |     |           |       boolean
   |     |           +--rw p2mp-replication?
   |     |           |       boolean
   |     |           +--rw arp-proxy {vpn-common:ipv4}?
   |     |           |  +--rw enable?
   |     |           |  |       boolean
   |     |           |  +--rw arp-suppression?
   |     |           |  |       boolean
   |     |           |  +--rw ip-mobility-threshold?
   |     |           |  |       uint16
   |     |           |  +--rw duplicate-ip-detection-interval?
   |     |           |          uint16
   |     |           +--rw nd-proxy {vpn-common:ipv6}?
   |     |           |  +--rw enable?
   |     |           |  |       boolean
   |     |           |  +--rw nd-suppression?
   |     |           |  |       boolean
   |     |           |  +--rw ip-mobility-threshold?
   |     |           |  |       uint16
   |     |           |  +--rw duplicate-ip-detection-interval?
   |     |           |          uint16
   |     |           +--rw underlay-multicast?
   |     |           |       boolean
   |     |           +--rw flood-unknown-unicast-supression?
   |     |           |       boolean
   |     |           +--rw vpws-vlan-aware?
   |     |           |       boolean
   |     |           +--rw bum-management
   |     |           |  +--rw discard-broadcast?
   |     |           |  |       boolean
   |     |           |  +--rw discard-unknown-multicast?
   |     |           |  |       boolean
   |     |           |  +--rw discard-unknown-unicast?
   |     |           |          boolean
   |     |           +--rw pbb
   |     |              +--rw backbone-src-mac?
   |     |                      yang:mac-address
   |     +--:(ldp)
   |     |  +--rw t-ldp-pw-type?
   |     |  |       identityref
   |     |  +--rw encapsulation-type?
   |     |  |       identityref
   |     |  +--rw ac-pw-list* [peer-addr vc-id]
   |     |  |  +--rw peer-addr      inet:ip-address
   |     |  |  +--rw vc-id          vpn-common:vpn-id
   |     |  |  +--rw pw-type?       identityref
   |     |  |  +--rw pw-priority?   uint32
   |     |  +--rw qinq
   |     |     +--rw s-tag?   uint32
   |     |     +--rw c-tag?   uint32
   |     +--:(l2tp)
   |        +--rw router-id?
   |        |       rt-types:router-id
   |        +--rw pseudowire-type?
   |        |       identityref
   |        +--rw agi?
   |        |       uint32
   |        +--rw saii?                           uint8
   |        +--rw remote-forwarders* [peer-addr taii]
   |           +--rw peer-addr    inet:ip-address
   |           +--rw taii         uint8
                 ...]]></artwork>
            </figure>
          </section>
        </section>

        <section anchor="sna" title="VPN Network Access">
          <t>A 'vpn-network-access' represents an entry point to a VPN service
          . In other words, this container encloses the parameters that
          describe the access information for the traffic that belongs to a
          particular L2VPN. As such, every 'vpn-network-access' MUST belong to
          one and only one 'vpn-node'.</t>

          <t>A 'vpn-network-access' includes information such as the
          connection on which the access is defined , the specific layer 2
          service requirements, etc.</t>

          <t>The VPN network access is comprised of:</t>

          <t><list style="hanging">
              <t hangText="'id':">Identifier of the VPN network access.</t>

              <t hangText="'description':">Text describing the VPN network
              access.</t>

              <t hangText="'status':">Administrative and operational status of
              the service.</t>

              <t hangText="'ethernet-service-oam':">Carries information about
              the service OAM.</t>
            </list></t>

          <figure align="right" anchor="vpn_network_access_tree"
                  title="VPN Network Access Subtree">
            <artwork align="center"><![CDATA[  +--rw l2vpn-ntw
     +--rw vpn-profiles
     |  ...
     +--rw vpn-services
        +--rw vpn-service* [vpn-id]
           ...
           +--rw vpn-nodes
              +--rw vpn-node* [vpn-node-id]
                 ...
                 +--rw vpn-network-accesses
                    +--rw vpn-network-access* [id]
                       +--rw id                        vpn-common:vpn-id
                       +--rw description?              string
                       +--rw port-id?                  vpn-common:vpn-id
                       +--rw global-parameters-profile?   leafref
                       +--rw status
                       |  +--rw admin-status
                       |  |  +--rw status?         identityref
                       |  |  +--rw last-updated?   yang:date-and-time
                       |  +--ro oper-status
                       |     +--ro status?         identityref
                       |     +--ro last-updated?   yang:date-and-time
                       +--rw connection
                       |  ... 
                       +--rw group* [group-id]
                       |  +--rw group-id                       string
                       |  +--rw group-color?                   string
                       |  +--rw precedence?
                       |  |       identityref
                       |  +--rw ethernet-segment-identifier?   leafref
                       +--rw ethernet-service-oam
                       |  ...
                       +--rw service
                          ...                      ]]></artwork>
          </figure>

          <section anchor="connection" title="Connection">
            <t>The 'connection' container is used to configure the relevant
            properties of the interface that is attached to the VPN, for
            example, the encapsulation type, the lag creation, or the relation
            ship between 'vpn-network-accesses'.</t>

            <t><list style="hanging">
                <t hangText="'encapsulation':">Contains the layer 2
                encapsulation properties of a VPN network access (e.g., IP
                dot1q, qinq or vxlan).</t>

                <t hangText="'lag-interface':">Includes the Link Aggregation
                Protocol (LACP) configuration attributes including as main
                attributes the LACP-Mode, LACP-Speed, and Members.</t>

                <t hangText="'group':">Group container allows spanning several
                'vpn-network-accesses' based on the group identifier
                attribute. The 'vpn-netwrok-accesses' related to the same
                customer/service SHOULD have the same group-id. In that case,
                the precedence attribute SHOULD be used to differentiate the
                Primary and Secondary accesses for that service (an example is
                shown in <xref target="prec-example"></xref>).</t>
              </list></t>

            <t></t>

            <t>Note that the 'connection' container does not include the
            physical-specific configuration as this is assumed to be directly
            handled using device modules (e.g., interfaces module). Moreover,
            this design is also meant to avoid manipulated global parameters
            at the service level and lower the risk of impacting other
            services sharing the same physical interface.</t>

            <figure align="right" anchor="connection_tree"
                    title="Connection Subtree">
              <artwork align="center"><![CDATA[  +--rw l2vpn-ntw
     +--rw vpn-profiles
     |  ...
     +--rw vpn-services
        +--rw vpn-service* [vpn-id]
           ...
           +--rw vpn-nodes
              +--rw vpn-node* [vpn-node-id]
                 ...
                 +--rw vpn-network-accesses
                    +--rw vpn-network-access* [id]
                       ...
                       +--rw connection
                       |  +--rw l2-termination-point?
                       |  |       vpn-common:vpn-id
                       |  +--rw local-bridge-reference?
                       |  |       vpn-common:vpn-id
                       |  +--rw bearer-reference?         string
                       |  |       {vpn-common:bearer-reference}?
                       |  +--rw encapsulation
                       |  |  +--rw type?              identityref
                       |  |  +--rw dot1q {vpn-common:dot1q}?
                       |  |  |  +--rw tag-type?   identityref
                       |  |  |  +--rw cvlan-id?   uint16
                       |  |  |  +--rw rewrite
                       |  |  |     +--rw (tag-choice)?
                       |  |  |     |  +--:(pop)
                       |  |  |     |  |  +--rw pop?
                       |  |  |     |  |          enumeration
                       |  |  |     |  +--:(push)
                       |  |  |     |  |  +--rw push?        empty
                       |  |  |     |  +--:(translate)
                       |  |  |     |     +--rw translate?
                       |  |  |     |             enumeration
                       |  |  |     +--rw cvlan-id?          uint16
                       |  |  |     +--rw mode?         enumeration
                       |  |  +--rw priority-tagged
                       |  |  |  +--rw tag-type?   identityref
                       |  |  +--rw qinq {vpn-common:qinq}?
                       |  |     +--rw tag-type?   identityref
                       |  |     +--rw svlan-id    uint16
                       |  |     +--rw cvlan-id    uint16
                       |  +--rw lag-interface
                       |          {vpn-common:lag-interface}?
                       |     +--rw lag-interface*
                       |     |       [lag-interface-number]
                       |     |  +--rw lag-interface-number    uint32
                       |     |  +--rw lacp
                       |     |     +--rw lacp-state?         boolean
                       |     |     +--rw lacp-mode?          boolean
                       |     |     +--rw lacp-speed?         boolean
                       |     |     +--rw mini-link?          uint32
                       |     |     +--rw system-id?
                       |     |     |       yang:mac-address
                       |     |     +--rw admin-key?          uint16
                       |     |     +--rw system-priority?    uint16
                       |     |     +--rw member-link-list
                       |     |     |  +--rw member-link* [name]
                       |     |     |     +--rw name          string
                       |     |     |     +--rw port-speed?   uint32
                       |     |     |     +--rw mode?    identityref
                       |     |     |     +--rw link-mtu?     uint32
                       |     |     |     +--rw oam-802.3ah-link
                       |     |     |             {oam-3ah}?
                       |     |     |        +--rw enable?   boolean
                       |     |     +--rw flow-control?       string
                       |     |     +--rw lldp?               boolean
                       |     +--rw split-horizon
                       |        +--rw group-name?   string    
                       ...            ]]></artwork>
            </figure>
          </section>

          <section title="EVPN-VPWS Service Instance">
            <t></t>

            <t>XXX Only valid for EVPN/VPWS, hence the check on evpn-type.</t>

            <t></t>

            <t><figure align="center" anchor="vsi-tree"
                title="EVPN-VPWS Service Instance Subtree">
                <artwork><![CDATA[  +--rw l2vpn-ntw
     +--rw vpn-profiles
     |  ...
     +--rw vpn-services
        +--rw vpn-service* [vpn-id]
           ...
           +--rw vpn-nodes
              +--rw vpn-node* [vpn-node-id]
                 ...
                 +--rw vpn-network-accesses
                    +--rw vpn-network-access* [id]
                       ...
                       +--rw vpws-service-instance
                       |  +--rw (local-vsi-choice)?
                       |  |  +--:(directly-assigned)
                       |  |  |  +--rw local-vpws-service-instance?
                       |  |  |          uint32
                       |  |  +--:(auto-assigned)
                       |  |     +--rw local-vsi-auto
                       |  |        +--rw (auto-mode)?
                       |  |        |  +--:(from-pool)
                       |  |        |  |  +--rw vsi-pool-name?
                       |  |        |  |          string
                       |  |        |  +--:(full-auto)
                       |  |        |     +--rw auto?            empty
                       |  |        +--ro auto-local-vsi?
                       |  |                uint32
                       |  +--rw (remote-vsi-choice)?
                       |     +--:(directly-assigned)
                       |     |  +--rw remote-vpws-service-instance?
                       |     |          uint32
                       |     +--:(auto-assigned)
                       |        +--rw remote-vsi-auto
                       |           +--rw (auto-mode)?
                       |           |  +--:(from-pool)
                       |           |  |  +--rw vsi-pool-name?
                       |           |  |          string
                       |           |  +--:(full-auto)
                       |           |     +--rw auto?            empty
                       |           +--ro auto-remote-vsi?
                       |                   uint32
                       ...
]]></artwork>
              </figure></t>
          </section>

          <section title="Ethernet OAM">
            <t></t>

            <t><figure align="center" anchor="oamt" title="OAM Subtree">
                <artwork align="center"><![CDATA[  +--rw l2vpn-ntw
     +--rw vpn-profiles
     |  ...
     +--rw vpn-services
        +--rw vpn-service* [vpn-id]
           ...
           +--rw vpn-nodes
              +--rw vpn-node* [vpn-node-id]
                 ...
                 +--rw vpn-network-accesses
                    +--rw vpn-network-access* [id]
                       ...
                       +--rw ethernet-service-oam
                       |  +--rw md-name?        string
                       |  +--rw md-level?       uint8
                       |  +--rw cfm-802.1-ag
                       |  |  +--rw n2-uni-c* [maid]
                       |  |  |  +--rw maid                string
                       |  |  |  +--rw mep-id?             uint32
                       |  |  |  +--rw mep-level?          uint32
                       |  |  |  +--rw mep-up-down?        
                       |  |  |  |                   enumeration
                       |  |  |  +--rw remote-mep-id?      uint32
                       |  |  |  +--rw cos-for-cfm-pdus?   uint32
                       |  |  |  +--rw ccm-interval?       uint32
                       |  |  |  +--rw ccm-holdtime?       uint32
                       |  |  |  +--rw ccm-p-bits-pri?
                       |  |  |          ccm-priority-type
                       |  |  +--rw n2-uni-n* [maid]
                       |  |     +--rw maid                string
                       |  |     +--rw mep-id?             uint32
                       |  |     +--rw mep-level?          uint32
                       |  |     +--rw mep-up-down?        
                       |  |     |                    enumeration
                       |  |     +--rw remote-mep-id?      uint32
                       |  |     +--rw cos-for-cfm-pdus?   uint32
                       |  |     +--rw ccm-interval?       uint32
                       |  |     +--rw ccm-holdtime?       uint32
                       |  |     +--rw ccm-p-bits-pri?
                       |  |             ccm-priority-type
                       |  +--rw y-1731* [maid]
                       |     +--rw maid               string
                       |     +--rw mep-id?            uint32
                       |     +--rw type?              identityref
                       |     +--rw remote-mep-id?     uint32
                       |     +--rw message-period?    uint32
                       |     +--rw measurement-interval?   uint32
                       |     +--rw cos?        uint32
                       |     +--rw loss-measurement?      boolean
                       |     +--rw synthethic-loss-measurement?
                       |     |       boolean
                       |     +--rw delay-measurement
                       |     |  +--rw enable-dm?   boolean
                       |     |  +--rw two-way?     boolean
                       |     +--rw frame-size?     uint32
                       |     +--rw session-type?   enumeration
                       ...]]></artwork>
              </figure></t>
          </section>

          <section anchor="service_details" title="Services">
            <t>This container (<xref target="service_tree"></xref>) provides a
            set of service details such as bandwidth and QoS.</t>

            <t><figure align="center" anchor="service_tree"
                title="Service Overall Subtree">
                <artwork align="center"><![CDATA[  +--rw l2vpn-ntw
     +--rw vpn-profiles
     |  ...
     +--rw vpn-services
        +--rw vpn-service* [vpn-id]
           ...
           +--rw vpn-nodes
              +--rw vpn-node* [vpn-node-id]
                 ...
                 +--rw vpn-network-accesses
                    +--rw vpn-network-access* [id]
                       ...
                       +--rw service
                          +--rw mtu?            uint32
                          +--rw svc-input-bandwidth
                          |  ...
                          +--rw svc-output-bandwidth
                          |  ...
                          +--rw qos {vpn-common:qos}?
                          |  ...
                          +--rw mac-policies
                          |  ...
                          +--rw broadcast-unknown-unicast-multicast
                             ...         ]]></artwork>
              </figure>The description of the service data nodes is as
            follows:</t>

            <t><list style="hanging">
                <t hangText="'mtu':">sss</t>

                <t hangText="'svc-input-bandwidth':">xxx<figure align="center"
                    anchor="inbw-tree" title="Service Input Bandwidth Subtree">
                    <artwork align="center"><![CDATA[                       +--rw service
                          ...
                          +--rw svc-input-bandwidth
                          |       {vpn-common:input-bw}?
                          |  +--rw input-bandwidth* [type]
                          |     +--rw type      identityref
                          |     +--rw cos-id?   uint8
                          |     |       {vpn-common:qos}?
                          |     +--rw cir?      uint64
                          |     +--rw cbs?      uint64
                          |     +--rw eir?      uint64
                          |     +--rw ebs?      uint64
                          |     +--rw pir?      uint64
                          |     +--rw pbs?      uint64
                          ...         ]]></artwork>
                  </figure></t>

                <t hangText="'svc-output-bandwidth':">xx<figure align="center"
                    anchor="outbw-tree"
                    title="Service Output Bandwidth Subtree">
                    <artwork align="center"><![CDATA[                       +--rw service
                          ...
                          +--rw svc-output-bandwidth
                          |       {vpn-common:output-bw}?
                          |  +--rw output-bandwidth* [type]
                          |     +--rw type      identityref
                          |     +--rw cos-id?   uint8
                          |     |       {vpn-common:qos}?
                          |     +--rw cir?      uint64
                          |     +--rw cbs?      uint64
                          |     +--rw eir?      uint64
                          |     +--rw ebs?      uint64
                          |     +--rw pir?      uint64
                          |     +--rw pbs?      uint64
                          ...         ]]></artwork>
                  </figure></t>

                <t hangText="QoS">ssss<figure align="center" anchor="qos-tree"
                    title="QoS Subtree">
                    <artwork align="center"><![CDATA[                       +--rw service
                          ...
                          +--rw qos {vpn-common:qos}?
                          |  +--rw qos-classification-policy
                          |  |  +--rw rule* [id]
                          |  |     +--rw id                string
                          |  |     +--rw (match-type)?
                          |  |     |  +--:(match-flow)
                          |  |     |  |  +--rw match-flow
                          |  |     |  |     +--rw dscp?   inet:dscp
                          |  |     |  |     +--rw dot1q?     uint16
                          |  |     |  |     +--rw pcp?       uint8
                          |  |     |  |     +--rw src-mac-address?
                          |  |     |  |     |       yang:mac-address
                          |  |     |  |     +--rw dst-mac-address?
                          |  |     |  |     |       yang:mac-address
                          |  |     |  |     +--rw color-type?
                          |  |     |  |     |       identityref
                          |  |     |  |     +--rw any?         empty
                          |  |     |  +--:(match-application)
                          |  |     |     +--rw match-application?
                          |  |     |             identityref
                          |  |     +--rw target-class-id?     string
                          |  +--rw qos-profile
                          |     +--rw qos-profile* [profile]
                          |        +--rw profile      leafref
                          |        +--rw direction?   identityref
                          ...         ]]></artwork>
                  </figure></t>

                <t hangText="'mac-policies':">ssss<figure align="center"
                    anchor="mac-policies-tree" title="MAC Policies Subtree">
                    <artwork align="center"><![CDATA[                       +--rw service
                          ...
                          +--rw mac-policies
                          |  +--rw access-control-list* [name]
                          |  |  +--rw name                    string
                          |  |  +--rw src-mac-address*
                          |  |  |       yang:mac-address
                          |  |  +--rw src-mac-address-mask*
                          |  |  |       yang:mac-address
                          |  |  +--rw dst-mac-address*
                          |  |  |       yang:mac-address
                          |  |  +--rw dst-mac-address-mask*
                          |  |  |       yang:mac-address
                          |  |  +--rw action?          identityref
                          |  |  +--rw rate-limit?      decimal64
                          |  +--rw mac-loop-prevention
                          |  |  +--rw window?            uint32
                          |  |  +--rw frequency?         uint32
                          |  |  +--rw retry-timer?       uint32
                          |  |  +--rw protection-type?   identityref
                          |  +--rw mac-addr-limit
                          |     +--rw mac-num-limit?   uint16
                          |     +--rw time-interval?   uint32
                          |     +--rw action?          identityref
                          ...         ]]></artwork>
                  </figure></t>

                <t
                hangText="'broadcast-unknown-unicast-multicast':">xxxx<figure
                    align="center" anchor="bum_tree" title="BUM  Subtree">
                    <artwork align="center"><![CDATA[                       +--rw service
                          ...
                          +--rw broadcast-unknown-unicast-multicast
                             +--rw multicast-site-type?
                             |       enumeration
                             +--rw multicast-gp-address-mapping* [id]
                             |  +--rw id                 uint16
                             |  +--rw vlan-id?           uint32
                             |  +--rw mac-gp-address?
                             |  |       yang:mac-address
                             |  +--rw port-lag-number?   uint32
                             +--rw bum-overall-rate?     uint32         ]]></artwork>
                  </figure></t>
              </list></t>
          </section>
        </section>
      </section>
    </section>

    <section title="YANG Modules">
      <t></t>

      <section anchor="iana-bgp" title="IANA BGP Layer 2 Encapsulation Types">
        <t>The "iana-bgp-l2-encaps" YANG module (<xref
        target="iana-bgp"></xref>) is designed to echo the registry available
        at <xref target="IANA-BGP-L2"></xref>. </t>

        <t><figure>
            <artwork><![CDATA[<CODE BEGINS>file "iana-bgp-l2-encaps@2021-07-05.yang"
module iana-bgp-l2-encaps {
  yang-version 1.1;
  namespace "urn:ietf:params:xml:ns:yang:iana-bgp-l2-encaps";
  prefix iana-bgp-l2-encaps;

  organization
    "IANA";
  contact
    "Internet Assigned Numbers Authority

     Postal: ICANN
          12025 Waterfront Drive, Suite 300
          Los Angeles, CA  90094-2536
          United States of America
     Tel:    +1 310 301 5800
     <mailto:iana@iana.org>";
  description
    "This module contains a collection of YANG data types defined
     by IANA and used for referring to BGP layer 2 encapsulation
     types.

     Copyright (c) 2021 IETF Trust and the persons identified as
     authors of the code.  All rights reserved.

     Redistribution and use in source and binary forms, with or
     without modification, is permitted pursuant to, and subject
     to the license terms contained in, the Simplified BSD License
     set forth in Section 4.c of the IETF Trust's Legal Provisions
     Relating to IETF Documents
     (http://trustee.ietf.org/license-info).

     This version of this YANG module is part of RFC XXXX; see
     the RFC itself for full legal notices.";

  revision 2021-07-05 {
    description
      "First revision.";
    reference
      "RFC XXXX: A Layer 2 VPN Network YANG Model.";
  }

  identity bgp-l2-encaps-type {
    description
      "Base BGP Layer 2 encapsulation type.";
    reference
      "RFC 6624: Layer 2 Virtual Private Networks Using BGP for
                 Auto-Discovery and Signaling";
  }

  identity frame-relay {
    base bgp-l2-encaps-type;
    description
      "Frame Relay.";
    reference
      "RFC 4446: IANA Allocations for Pseudowire Edge
                 to Edge Emulation (PWE3)";
  }

  identity atm-aal5 {
    base bgp-l2-encaps-type;
    description
      "ATM AAL5 SDU VCC transport.";
    reference
      "RFC 4446: IANA Allocations for Pseudowire Edge
                 to Edge Emulation (PWE3)";
  }

  identity atm-cell {
    base bgp-l2-encaps-type;
    description
      "ATM transparent cell transport";
    reference
      "RFC 4816: Pseudowire Emulation Edge-to-Edge (PWE3)
                 Asynchronous Transfer Mode (ATM) Transparent
                 Cell Transport Service";
  }

  identity ethernet-tagged-mode {
    base bgp-l2-encaps-type;
    description
      "Ethernet (VLAN) Tagged Mode.";
    reference
      "RFC 4448: Encapsulation Methods for Transport of Ethernet
                 over MPLS Networks";
  }

  identity ethernet-raw-mode {
    base bgp-l2-encaps-type;
    description
      "Ethernet Raw Mode.";
    reference
      "RFC 4448: Encapsulation Methods for Transport of Ethernet
                 over MPLS Networks";
  }

  identity hdlc {
    base bgp-l2-encaps-type;
    description
      "Cisco HDLC.";
    reference
      "RFC 4618: Encapsulation Methods for Transport of
                 PPP/High-Level Data Link Control (HDLC)
                 over MPLS Networks";
  }

  identity ppp {
    base bgp-l2-encaps-type;
    description
      "PPP.";
    reference
      "RFC 4618: Encapsulation Methods for Transport of
                 PPP/High-Level Data Link Control (HDLC)
                 over MPLS Networks";
  }

  identity circuit-emulation {
    base bgp-l2-encaps-type;
    description
      "SONET/SDH Circuit Emulation Service.";
    reference
      "RFC 4842: Synchronous Optical Network/Synchronous Digital
                 Hierarchy (SONET/SDH) Circuit Emulation over Packet
                 (CEP)";
  }

  identity atm-to-vcc {
    base bgp-l2-encaps-type;
    description
      "ATM n-to-one VCC cell transport.";
    reference
      "RFC 4717: Encapsulation Methods for Transport of
                 Asynchronous Transfer Mode (ATM) over MPLS Networks";
  }

  identity atm-to-vpc {
    base bgp-l2-encaps-type;
    description
      "ATM n-to-one VPC cell transport.";
    reference
      "RFC 4717: Encapsulation Methods for Transport of
                 Asynchronous Transfer Mode (ATM) over MPLS Networks";
  }

  identity layer-2-transport {
    base bgp-l2-encaps-type;
    description
      "IP Layer 2 Transport.";
    reference
      "RFC 3032: MPLS Label Stack Encoding";
  }

  identity fr-port-mode {
    base bgp-l2-encaps-type;
    description
      "Frame Relay Port mode.";
    reference
      "RFC 4619: Encapsulation Methods for Transport of Frame Relay over
                 Multiprotocol Label Switching (MPLS) Networks";
  }

  identity e1 {
    base bgp-l2-encaps-type;
    description
      "Structure-agnostic E1 over packet.";
    reference
      "RFC 4553: Structure-Agnostic Time Division Multiplexing (TDM)
                 over Packet (SAToP)";
  }

  identity t1 {
    base bgp-l2-encaps-type;
    description
      "Structure-agnostic T1 (DS1) over packet.";
    reference
      "RFC 4553: Structure-Agnostic Time Division Multiplexing (TDM)
                 over Packet (SAToP)";
  }

  identity vpls {
    base bgp-l2-encaps-type;
    description
      "VPLS.";
    reference
      "RFC 4761: Virtual Private LAN Service (VPLS)
                 Using BGP for Auto-Discovery and Signaling";
  }

  identity t3 {
    base bgp-l2-encaps-type;
    description
      "Structure-agnostic T3 (DS3) over packet.";
    reference
      "RFC 4553: Structure-Agnostic Time Division Multiplexing (TDM)
                 over Packet (SAToP)";
  }

  identity structure-aware {
    base bgp-l2-encaps-type;
    description
      "Nx64kbit/s Basic Service using Structure-aware.";
    reference
      "RFC 5086: Structure-Aware Time Division Multiplexed (TDM)
                 Circuit Emulation Service over Packet Switched
                 Network (CESoPSN)";
  }

  identity dlci {
    base bgp-l2-encaps-type;
    description
      "Frame Relay DLCI.";
    reference
      "RFC 4619: Encapsulation Methods for Transport of Frame Relay over
                 Multiprotocol Label Switching (MPLS) Networks";
  }

  identity e3 {
    base bgp-l2-encaps-type;
    description
      "Structure-agnostic E3 over packet.";
    reference
      "RFC 4553: Structure-Agnostic Time Division Multiplexing (TDM)
                 over Packet (SAToP)";
  }

  identity ds1 {
    base bgp-l2-encaps-type;
    description
      "Octet-aligned payload for Structure-agnostic DS1 circuits.";
    reference
      "RFC 4553: Structure-Agnostic Time Division Multiplexing (TDM)
                 over Packet (SAToP)";
  }

  identity cas {
    base bgp-l2-encaps-type;
    description
      "DS1 (ESF) Nx64kbit/s with CAS using Structure-aware.";
    reference
      "RFC 5086: Structure-Aware Time Division Multiplexed (TDM)
                 Circuit Emulation Service over Packet Switched
                 Network (CESoPSN)";
  }

  identity esf {
    base bgp-l2-encaps-type;
    description
      "DS1 (ESF) Nx64kbit/s with CAS using Structure-aware.";
    reference
      "RFC 5086: Structure-Aware Time Division Multiplexed (TDM)
                 Circuit Emulation Service over Packet Switched
                 Network (CESoPSN)";
  }

  identity sf {
    base bgp-l2-encaps-type;
    description
      "DS1 (SF) Nx64kbit/s with CAS using Structure-aware.";
    reference
      "RFC 5086: Structure-Aware Time Division Multiplexed (TDM)
                 Circuit Emulation Service over Packet Switched
                 Network (CESoPSN)";
  }
}
<CODE ENDS>]]></artwork>
          </figure></t>
      </section>

      <section anchor="iana-pw" title="IANA Encapsulation Types">
        <t>The initial version of the "iana-pseudowire-types" YANG module
        (<xref target="iana-pw"></xref>) is designed to echo the registry
        available at <xref target="IANA-PW-Types"></xref>. </t>

        <t><figure>
            <artwork><![CDATA[<CODE BEGINS>file "iana-pseudowire-types@2021-07-05.yang"
module iana-pseudowire-types {
  yang-version 1.1;
  namespace "urn:ietf:params:xml:ns:yang:iana-pseudowire-types";
  prefix iana-pw-types;

  organization
    "IANA";
  contact
    "Internet Assigned Numbers Authority

     Postal: ICANN
          12025 Waterfront Drive, Suite 300
          Los Angeles, CA  90094-2536
          United States of America
     Tel:    +1 310 301 5800
     <mailto:iana@iana.org>";
  description
    "This module contains a collection of YANG data types defined
     by IANA and used for referring to Pseudowire Types.

     Copyright (c) 2021 IETF Trust and the persons identified as
     authors of the code.  All rights reserved.

     Redistribution and use in source and binary forms, with or
     without modification, is permitted pursuant to, and subject
     to the license terms contained in, the Simplified BSD License
     set forth in Section 4.c of the IETF Trust's Legal Provisions
     Relating to IETF Documents
     (http://trustee.ietf.org/license-info).

     This version of this YANG module is part of RFC XXXX; see
     the RFC itself for full legal notices.";

  revision 2021-07-05 {
    description
      "First revision.";
    reference
      "RFC XXXX: A Layer 2 VPN Network YANG Model.";
  }

  identity iana-pw-types {
    description
      "Base BGP Layer 2 encapsulation type.";
  }

  identity frame-relay {
    base iana-pw-types;
    description
      "Frame Relay.";
    reference
      "RFC 4619: Encapsulation Methods for Transport of Frame Relay
                 over Multiprotocol Label Switching (MPLS) Networks";
  }

  identity atm-aal5 {
    base iana-pw-types;
    description
      "ATM AAL5 SDU VCC transport.";
  }

  identity atm-cell {
    base iana-pw-types;
    description
      "ATM transparent cell transport";
    reference
      "RFC 4717: Encapsulation Methods for Transport of
                 Asynchronous Transfer Mode (ATM) over MPLS
                 Networks";
  }

  identity ethernet-tagged-mode {
    base iana-pw-types;
    description
      "Ethernet (VLAN) Tagged Mode.";
    reference
      "RFC 4448: Encapsulation Methods for Transport of Ethernet
                 over MPLS Networks";
  }

  identity ethernet {
    base iana-pw-types;
    description
      "Ethernet.";
    reference
      "RFC 4448: Encapsulation Methods for Transport of Ethernet
                 over MPLS Networks";
  }

  identity hdlc {
    base iana-pw-types;
    description
      "Cisco HDLC.";
    reference
      "RFC 4618: Encapsulation Methods for Transport of
                 PPP/High-Level Data Link Control (HDLC)
                 over MPLS Networks";
  }

  identity ppp {
    base iana-pw-types;
    description
      "PPP.";
    reference
      "RFC 4618: Encapsulation Methods for Transport of
                 PPP/High-Level Data Link Control (HDLC)
                 over MPLS Networks";
  }

  identity circuit-emulation-mpls {
    base iana-pw-types;
    description
      "SONET/SDH Circuit Emulation Service Over MPLS Encapsulation.";
    reference
      "RFC 5143: Synchronous Optical Network/Synchronous Digital
                 Hierarchy (SONET/SDH) Circuit Emulation Service over
                 MPLS (CEM) Encapsulation";
  }

  identity atm-to-vcc {
    base iana-pw-types;
    description
      "ATM n-to-one VCC cell transport.";
    reference
      "RFC 4717: Encapsulation Methods for Transport of
                 Asynchronous Transfer Mode (ATM) over MPLS Networks";
  }

  identity atm-to-vpc {
    base iana-pw-types;
    description
      "ATM n-to-one VPC cell transport.";
    reference
      "RFC 4717: Encapsulation Methods for Transport of
                 Asynchronous Transfer Mode (ATM) over MPLS Networks";
  }

  identity layer-2-transport {
    base iana-pw-types;
    description
      "IP Layer2 Transport.";
    reference
      "RFC 3032: MPLS Label Stack Encoding";
  }

  identity atm-one-to-one-vcc {
    base iana-pw-types;
    description
      "ATM one-to-one VCC Cell Mode.";
    reference
      "RFC 4717: Encapsulation Methods for Transport of
                 Asynchronous Transfer Mode (ATM) over MPLS Networks";
  }

  identity atm-one-to-one-vpc {
    base iana-pw-types;
    description
      "ATM one-to-one VPC Cell Mode.";
    reference
      "RFC 4717: Encapsulation Methods for Transport of
                 Asynchronous Transfer Mode (ATM) over MPLS Networks";
  }

  identity atm-aal5-vcc {
    base iana-pw-types;
    description
      "ATM AAL5 PDU VCC transport.";
    reference
      "RFC 4717: Encapsulation Methods for Transport of
                 Asynchronous Transfer Mode (ATM) over MPLS Networks";
  }

  identity fr-port-mode {
    base iana-pw-types;
    description
      "Frame-Relay Port mode.";
    reference
      "RFC 4619: Encapsulation Methods for Transport of Frame Relay over
                 Multiprotocol Label Switching (MPLS) Networks";
  }

  identity circuit-emulation-packet {
    base iana-pw-types;
    description
      "SONET/SDH Circuit Emulation over Packet.";
    reference
      "RFC 4842: Synchronous Optical Network/Synchronous Digital 
                 Hierarchy (SONET/SDH) Circuit Emulation over Packet
                 (CEP)";
  }

  identity e1 {
    base iana-pw-types;
    description
      "Structure-agnostic E1 over Packet.";
    reference
      "RFC 4553: Structure-Agnostic Time Division Multiplexing (TDM)
                 over Packet (SAToP)";
  }

  identity t1 {
    base iana-pw-types;
    description
      "Structure-agnostic T1 (DS1) over Packet.";
    reference
      "RFC 4553: Structure-Agnostic Time Division Multiplexing (TDM)
                 over Packet (SAToP)";
  }

  identity e3 {
    base iana-pw-types;
    description
      "Structure-agnostic E3 over Packet.";
    reference
      "RFC 4553: Structure-Agnostic Time Division Multiplexing (TDM)
                 over Packet (SAToP)";
  }

  identity t3 {
    base iana-pw-types;
    description
      "Structure-agnostic T3 (DS3) over Packet.";
    reference
      "RFC 4553: Structure-Agnostic Time Division Multiplexing (TDM)
                 over Packet (SAToP)";
  }

  identity ces-over-psn {
    base iana-pw-types;
    description
      "CESoPSN basic mode.";
    reference
      "RFC 5086: Structure-Aware Time Division Multiplexed (TDM)
                 Circuit Emulation Service over Packet Switched Network
                 (CESoPSN)";
  }

  identity tdm-over-ip-aal1 {
    base iana-pw-types;
    description
      "TDMoIP AAL1 Mode.";
    reference
      "RFC 5087: Time Division Multiplexing over IP (TDMoIP)";
  }

  identity ces-over-psn-cas {
    base iana-pw-types;
    description
      "CESoPSN TDM with CAS.";
    reference
      "RFC 5086: Structure-Aware Time Division Multiplexed (TDM)
                 Circuit Emulation Service over Packet Switched Network
                 (CESoPSN)";
  }

  identity tdm-over-ip-aal2 {
    base iana-pw-types;
    description
      "TDMoIP AAL2 Mode.";
    reference
      "RFC 5087: Time Division Multiplexing over IP (TDMoIP)";
  }

  identity dlci {
    base iana-pw-types;
    description
      "Frame Relay DLCI.";
    reference
      "RFC 4619: Encapsulation Methods for Transport of Frame Relay over
                 Multiprotocol Label Switching (MPLS) Networks";
  }

  identity rohc {
    base iana-pw-types;
    description
      "ROHC Transport Header-compressed Packets.";
    reference
      "RFC 5795: The RObust Header Compression (ROHC) Framework
       RFC 4901: Protocol Extensions for Header Compression over MPLS";
  }

  identity ecrtp {
    base iana-pw-types;
    description
      "ECRTP Transport Header-compressed Packets.";
    reference
      "RFC 3545: Enhanced Compressed RTP (CRTP) for Links with High
                  Delay, Packet Loss and Reordering
       RFC 4901: Protocol Extensions for Header Compression over MPLS";
  }

  identity iphc {
    base iana-pw-types;
    description
      "IPHC Transport Header-compressed Packets.";
    reference
      "RFC 2507: IP Header Compression
       RFC 4901: Protocol Extensions for Header Compression over MPLS";
  }

  identity crtp {
    base iana-pw-types;
    description
      "cRTP Transport Header-compressed Packets.";
    reference
      "RFC 2508: Compressing IP/UDP/RTP Headers for Low-Speed Serial 
                 Links
       RFC 4901: Protocol Extensions for Header Compression over MPLS";
  }

  identity atm-vp-virtual-trunk {
    base iana-pw-types;
    description
      "ATM VP Virtual Trunk.";
  }

  identity fc-port-mode {
    base iana-pw-types;
    description
      "FC Port Mode.";
    reference
      "RFC 6307: Encapsulation Methods for Transport of
                 Fibre Channel Traffic over MPLS Networks";
  }

  identity wildcard {
    base iana-pw-types;
    description
      "Wildcard.";
    reference
      "RFC 4863: Wildcard Pseudowire Type";
  }
}
<CODE ENDS>]]></artwork>
          </figure></t>
      </section>

      <section anchor="YANG_module" title="L2NM">
        <t>The "ietf-l2vpn-ntw" YANG module uses types defined in <xref
        target="RFC6991"></xref>, <xref
        target="I-D.ietf-opsawg-vpn-common"></xref>, and <xref
        target="RFC8294"></xref>.</t>

        <figure align="center" anchor="module_YANG">
          <artwork align="left"><![CDATA[<CODE BEGINS>file "ietf-l2vpn-ntw@2021-04-29.yang"
module ietf-l2vpn-ntw {
  yang-version 1.1;
  namespace "urn:ietf:params:xml:ns:yang:ietf-l2vpn-ntw";
  prefix l2vpn-ntw;

  import ietf-inet-types {
    prefix inet;
    reference
      "RFC 6991: Common YANG Data Types, Section 4";
  }
  import ietf-yang-types {
    prefix yang;
    reference
      "RFC 6991: Common YANG Data Types, Section 3";
  }
  import ietf-vpn-common {
    prefix vpn-common;
    reference
      "RFC CCCC: A Layer 2/3 VPN Common YANG Model";
  }
  import iana-bgp-l2-encaps {
    prefix iana-bgp-l2-encaps;
  }
  import iana-pseudowire-types {
    prefix iana-pw-types;
  }
  import ietf-routing-types {
    prefix rt-types;
    reference
      "RFC 8294: Common YANG Data Types for the Routing Area";
  }

  organization
    "IETF OPSA (Operations and Management Area) Working Group";
  contact
    "WG Web:   <http://tools.ietf.org/wg/opsawg/>
     WG List:  <mailto:opsawg@ietf.org>

     Editor:    Samier Barguil
               <mailto:samier.barguilgiraldo.ext@telefonica.com>
     Author:    Oscar Gonzalez de Dios
               <mailto:oscar.gonzalezdedios@telefonica.com>
     Editor:    Mohamed Boucadair
               <mailto:mohamed.boucadair@orange.com>";
  description
    "This YANG module defines a network model for layer 2 VPN
     services.

     Copyright (c) 2021 IETF Trust and the persons identified as
     authors of the code.  All rights reserved.

     Redistribution and use in source and binary forms, with or
     without modification, is permitted pursuant to, and subject
     to the license terms contained in, the Simplified BSD License
     set forth in Section 4.c of the IETF Trust's Legal Provisions
     Relating to IETF Documents
     (http://trustee.ietf.org/license-info).

     This version of this YANG module is part of RFC XXXX; see
     the RFC itself for full legal notices.";

  revision 2021-04-15 {
    description
      "Initial version.";
    reference
      "RFC XXXX: A Layer 2 VPN Network YANG Model.";
  }

  /* Features */

  feature oam-3ah {
    description
      "Indicates the support of OAM 802.3ah.";
  }

  /* Identities */

  identity esi-type {
    description
      "T-(Ethernet Segment Identifier (ESI) Type) is a 1-octet field
       (most significant octet) that specifies the format of the
       remaining 9 octets (ESI Value).";
    reference
      "RFC 7432: BGP MPLS-Based Ethernet VPN, Section 5";
  }

  identity esi-type-0 {
    base esi-type;
    description
      "This type indicates an arbitrary 9-octet ESI value,
       which is managed and configured by the operator.";
  }

  identity esi-type-1 {
    base esi-type;
    description
      "When IEEE 802.1AX Link Aggregation Control Protocol (LACP)
       is used between the Provider Edge (PE) and Customer Edge (CE)
       devices, this ESI type indicates an auto-generated ESI value
       determined from LACP.";
  }

  identity esi-type-2 {
    base esi-type;
    description
      "The ESI value is auto-generated and determined based
       on the Layer 2 bridge protocol.";
  }

  identity esi-type-3 {
    base esi-type;
    description
      "This type indicates a MAC-based ESI value that can be
       auto-generated or configured by the operator.";
  }

  identity esi-type-4 {
    base esi-type;
    description
      "This type indicates a Router-ID ESI value that can be
       auto-generated or configured by the operator.";
  }

  identity esi-type-5 {
    base esi-type;
    description
      "This type indicates an Autonomous System (AS)-based ESI value
       that can be auto-generated or configured by the operator.";
  }

  identity df-election-methods {
    description
      "Base Identity Designated Forwarder (DF) election method.";
  }

  identity default-7432 {
    base df-election-methods;
    description
      "The default DF election method.

       The default procedure for DF election at the granularity of <ES,
       VLAN> for VLAN-based service or <ES, VLAN bundle> for VLAN-(aware)
       bundle service is referred to as 'service carving'.";
    reference
      "RFC 7432: BGP MPLS-Based Ethernet VPN, Section 8.5";
  }

  identity highest-random-weight {
    base df-election-methods;
    description
      "The highest random weight (HRW) method.";
    reference
      "RFC 8584: Framework for Ethernet VPN Designated
                 Forwarder Election Extensibility, Section 3";
  }

  identity preference {
    base df-election-methods;
    description
      "The preference based method. PEs are assigned with
       preferences to become the DF in the Ethernet Segment (ES).
       The exact preference-based algorithm (e.g., lowest-preference
       algorithm, highest-preference algorithm) to use is
       signaled at the control plane.";
  }

  identity evpn-redundancy-mode {
    description
      "Base identity for Ethernet VPN (EVPN) redundancy modes.";
  }

  identity single-active {
    base evpn-redundancy-mode;
    description
      "Indicates Single-Active redundancy mode for a given ES.";
    reference
      "RFC 7432: BGP MPLS-Based Ethernet VPN, Section 14.1.1";
  }

  identity all-active {
    base evpn-redundancy-mode;
    description
      "Indicates All-Active redundancy mode for a given ES.";
    reference
      "RFC 7432: BGP MPLS-Based Ethernet VPN, Section 14.1.2";
  }

  identity evpn-service-type {
    description
      "Base identity for EVPN service type.";
  }

  identity vlan-based-service-interface {
    base evpn-redundancy-mode;
    description
      "VLAN-Based Service Interface.";
    reference
      "RFC 7432: BGP MPLS-Based Ethernet VPN, Section 6.1";
  }

  identity vlan-bundle-service-interface {
    base evpn-redundancy-mode;
    description
      "VLAN Bundle Service Interface.";
    reference
      "RFC 7432: BGP MPLS-Based Ethernet VPN, Section 6.2";
  }

  identity vlan-aware-bundle-service-interface {
    base evpn-redundancy-mode;
    description
      "VLAN-Aware Bundle Service Interface.";
    reference
      "RFC 7432: BGP MPLS-Based Ethernet VPN, Section 6.3";
  }

  identity mapping-type {
    base vpn-common:multicast-gp-address-mapping;
    description
      "Identity for multicast group mapping type.";
  }

  identity protection-mode {
    description
      "Identity of protection mode";
  }

  identity oneplusone {
    base protection-mode;
    description
      "Identity for a scheme where the primary circuit will be
       protected by a backup circuit, typically meeting certain
       diverse path/fiber/site/node criteria.  Both primary and
       protection circuits are provisioned to be in the active
       forward ing state. The subscriber may choose to send the
       same service frames across both circuits simultaneously.";
  }

  identity one-to-one {
    base protection-mode;
    description
      "IIdentity for a scheme where a backup circuit to the primary
       circuit is provisioned.  Depending on the implementation
       agreement, the protection circuits may either always be
       in active forwarding state, or may only become active when
       a faulty state is detected on the primary circuit.";
  }

  identity policing {
    description
      "Identity of policing type.";
  }

  identity one-rate-two-color {
    base policing;
    description
      "Identity of one-rate, two-color (1R2C).";
  }

  identity two-rate-three-color {
    base policing;
    description
      "Identity of two-rate, three-color (2R3C).";
  }

  identity loop-prevention-type {
    description
      "Identity of loop prevention.";
  }

  identity shut {
    base loop-prevention-type;
    description
      "Identity of shut protection.";
  }

  identity trap {
    base loop-prevention-type;
    description
      "Identity of trap protection.";
  }

  identity color-type {
    description
      "Identity of color types.";
  }

  identity green {
    base color-type;
    description
      "Identity of the 'green' color type.";
  }

  identity yellow {
    base color-type;
    description
      "Identity of the 'yellow' color type.";
  }

  identity red {
    base color-type;
    description
      "Identity of the 'red' color type.";
  }

  identity t-ldp-pw-type {
    description
      "Identity for t-ldp-pw-type.";
  }

  identity vpws-type {
    base t-ldp-pw-type;
    description
      "Identity for VPWS.";
  }

  identity vpls-type {
    base t-ldp-pw-type;
    description
      "Identity for VPLS.";
  }

  identity hvpls {
    base t-ldp-pw-type;
    description
      "Identity for H-VPLS.";
  }

  identity evpn-type {
    description
      "Ethernet VPN types.";
  }

  identity evpn-vpws {
    base evpn-type;
    description
      "VPWS support in EVPN.";
  }

  identity evpn-pbb {
    base evpn-type;
    description
      "Provider Backbone Bridging Support in EVPN.";
  }

  identity pm-type {
    description
      "Identity for performance monitoring type.";
  }

  identity loss {
    base pm-type;
    description
      "Loss measurement.";
  }

  identity delay {
    base pm-type;
    description
      "Delay measurement.";
  }

  identity mac-learning-mode {
    description
      "Media Access Control (MAC) learning mode.";
  }

  identity data-plane {
    base mac-learning-mode;
    description
      "User MAC addresses are learned through ARP broadcast.";
  }

  identity control-plane {
    base mac-learning-mode;
    description
      "User MAC addresses are advertised through EVPN-BGP.";
  }

  identity mac-action {
    description
      "Base identity for a MAC action.";
  }

  identity drop {
    base mac-action;
    description
      "Identity for dropping a packet.";
  }

  identity flood {
    base mac-action;
    description
      "Identity for packet flooding.";
  }

  identity warning {
    base mac-action;
    description
      "Identity for sending a warning log message.";
  }

  identity precedence-type {
    description
      "Redundancy type. The service can be created
       with active and bakcup signalization.";
  }

  identity primary {
    base precedence-type;
    description
      "Identifies the main VPN network access.";
  }

  identity backup {
    base precedence-type;
    description
      "Identifies the backup VPN network access.";
  }

  /* Typedefs */

  typedef ccm-priority-type {
    type uint8 {
      range "0..7";
    }
    description
      "A 3-bit priority value to be used in the VLAN tag,
       if present in the transmitted frame.";
  }

  /* Groupings */

  grouping cfm-802-grouping {
    description
      "Grouping for 802.1ag CFM attributes.";
    leaf maid {
      type string;
      description
        "MA ID";
    }
    leaf mep-id {
      type uint32;
      description
        "Local Maintenance End Point (MEP) ID.";
    }
    leaf mep-level {
      type uint32;
      description
        "MEP level.";
    }
    leaf mep-up-down {
      type enumeration {
        enum up {
          description
            "MEP is up.";
        }
        enum down {
          description
            "MEP is down.";
        }
      }
      description
        "MEP up/down";
    }
    leaf remote-mep-id {
      type uint32;
      description
        "Remote MEP ID.";
    }
    leaf cos-for-cfm-pdus {
      type uint32;
      description
        "COS for CFM PDUs.";
    }
    leaf ccm-interval {
      type uint32;
      description
        "CCM interval.";
    }
    leaf ccm-holdtime {
      type uint32;
      description
        "CCM hold time.";
    }
    leaf ccm-p-bits-pri {
      type ccm-priority-type;
      description
        "The priority parameter for Continuity Check Messages (CCMs)
         transmitted by the MEP.";
    }
  }

  grouping y-1731 {
    description
      "Grouping for y.1731";
    list y-1731 {
      key "maid";
      description
        "List for y-1731.";
      leaf maid {
        type string;
        description
          "MA ID.";
      }
      leaf mep-id {
        type uint32;
        description
          "Local MEP ID.";
      }
      leaf type {
        type identityref {
          base pm-type;
        }
        description
          "Performance monitor types.";
      }
      leaf remote-mep-id {
        type uint32;
        description
          "Remote MEP ID.";
      }
      leaf message-period {
        type uint32;
        description
          "Defines the interval between OAM messages. The message
           period is expressed in milliseconds.";
      }
      leaf measurement-interval {
        type uint32;
        description
          "Specifies the measurement interval for statistics. The
           measurement interval is expressed in seconds.";
      }
      leaf cos {
        type uint32;
        description
          "Identifies the Class of Service.";
      }
      leaf loss-measurement {
        type boolean;
        description
          "Controls whether loss measurement is enabled/disabled.";
      }
      leaf synthethic-loss-measurement {
        type boolean;
        description
          "Indicates whether enable synthetic loss measurement.";
      }
      container delay-measurement {
        description
          "Container for delay measurement";
        leaf enable-dm {
          type boolean;
          description
            "Whether to enable delay measurement.";
        }
        leaf two-way {
          type boolean;
          description
            "Whether delay measurement is two-way (true) of one-
             way (false).";
        }
      }
      leaf frame-size {
        type uint32;
        description
          "Frame size";
      }
      leaf session-type {
        type enumeration {
          enum proactive {
            description
              "Proactive mode.";
          }
          enum on-demand {
            description
              "On-demand mode.";
          }
        }
        description
          "Session type.";
      }
    }
  }

  grouping global-parameters-profile {
    description
      "Container for per-service parameters.";
    leaf local-autonomous-system {
      type inet:as-number;
      description
        "Indicates a local AS Number (ASN).";
    }
    leaf svc-mtu {
      type uint32;
      description
        "Service MTU, it is also known as the maximum transmission unit
         or maximum frame size. When a frame is larger than the MTU,
         it is fragmented to accommodate the MTU of the network.";
    }
    leaf ce-vlan-preservation {
      type boolean;
      description
        "Preserve the CE-VLAN ID from ingress to egress,i.e.,
         CE-VLAN tag of the egress frame are identical to
         those of the ingress frame that yielded this egress
         service frame. If All-to-One bundling within a site
         is Enabled, then preservation applies to all Ingress
         service frames. If All-to-One bundling is disabled,
         then preservation applies to tagged Ingress service
         frames having CE-VLAN ID 1 through 4094.";
    }
    leaf ce-vlan-cos-perservation {
      type boolean;
      description
        "CE vlan CoS preservation. PCP bits in the CE-VLAN tag
         of the egress frame are identical to those of the ingress
         frame that yielded this egress service frame.";
    }
    leaf control-word-negotiation {
      type boolean;
      description
        "Controls whether Control-word negotiation is enabled
         (if set to true) or not (if set to false).";
      reference
        "Section 7 of RFC 8077";
    }
    container mac-policies {
      description
        "Container of MAC policies.";
      container mac-addr-limit {
        description
          "Container of MAC-Addr limit configuration.";
        leaf mac-num-limit {
          type uint16;
          description
            "Maximum number of MAC addresses learned from
             the customer for a single service instance.";
        }
        leaf time-interval {
          type uint32;
          units "milliseconds";
          description
            "The aging time of the mac address.";
        }
        leaf action {
          type identityref {
            base mac-action;
          }
          description
            "Specifies the action when the upper limit is
             exceeded: drop the packet, flood the
             packet, or simply send a warning log message.";
        }
      }
      container mac-loop-prevention {
        description
          "Container for MAC loop prevention.";
        leaf window {
          type uint32;
          units "seconds";
          default "180";
          description
            "The timer when a MAC mobility event is detected.";
        }
        leaf frequency {
          type uint32;
          default "5";
          description
            "The number of times to detect MAC duplication, where
             a 'duplicate MAC address' situation has occurred and
             the duplicate MAC address has been added to a list of
             duplicate MAC addresses.";
        }
        leaf retry-timer {
          type uint32;
          units "seconds";
          description
            "The retry timer. When the retry timer expires,
             the duplicate MAC address will be flushed from
             the MAC-VRF.";
        }
        leaf protection-type {
          type identityref {
            base loop-prevention-type;
          }
          description
            "Protection type.";
        }
      }
    }
    container multicast-like {
      if-feature "vpn-common:multicast";
      description
        "Multicast-like container.";
      leaf enabled {
        type boolean;
        default "false";
        description
          "Enables multicast.";
      }
      container customer-tree-flavors {
        description
          "Type of trees used by customer.";
        leaf-list tree-flavor {
          type identityref {
            base vpn-common:multicast-tree-type;
          }
          description
            "Type of multicast tree to be used.";
        }
      }
    }
  }

  /* Main L2NM Container */

  container l2vpn-ntw {
    description
      "Container for the L2NM.";
    container vpn-profiles {
      description
        "Container for VPN profiles.";
      uses vpn-common:vpn-profile-cfg;
    }
    container vpn-services {
      description
        "Container for L2VPN services.";
      list vpn-service {
        key "vpn-id";
        description
          "Container of a VPN service.";
        uses vpn-common:vpn-description;
        leaf parent-service-id {
          type vpn-common:vpn-id;
          description
            "Pointer to the parent service that
             triggered the L2NM.";
        }
        leaf vpn-type {
          type identityref {
            base vpn-common:service-type;
          }
          must "not(derived-from-or-self(current(), "
             + "'vpn-common:l3vpn'))" {
            error-message "L3VPN is only applicable in L3NM.";
          }
          description
            "Service type.";
        }
        leaf vpn-service-topology {
          type identityref {
            base vpn-common:vpn-topology;
          }
          description
            "Defining service topology, such as
             any-to-any, hub-spoke, etc.";
        }
        leaf bgp-ad-enabled {
          type boolean;
          description
            "Indicates whether BGP auto-discovey is enabled
             or disabled.";
        }
        leaf signaling-type {
          type identityref {
            base vpn-common:vpn-signaling-type;
          }
          description
            "VPN signaling type.";
        }
        container global-parameters-profiles {
          description
            "Container for a list of global parameters profiles.";
          list global-parameters-profile {
            key "profile-id";
            description
              "List of global parameters profiles.";
            leaf profile-id {
              type string;
              description
                "The identifier of the global parameters profile.";
            }
            uses vpn-common:route-distinguisher;
            uses vpn-common:vpn-route-targets;
            uses global-parameters-profile;
          }
        }
        container ethernet-segments {
          description
            "Top container for the Ethernet Segment Identifier (ESI).";
          list ethernet-segment {
            key "name";
            description
              "Top list for ESIs.";
            leaf name {
              type string;
              description
                "Includes the name of the Ethernet Segment (ES).";
            }
            leaf esi-type {
              type identityref {
                base esi-type;
              }
              default "esi-type-0";
              description
                "T-(ESI Type) is a 1-octet field (most significant
                 octet) that specifies the format of the remaining
                 9 octets (ESI Value).";
              reference
                "RFC 7432: BGP MPLS-Based Ethernet VPN, Section 5";
            }
            choice esi-choice {
              description
                "Ethernet segment choice between several types.
                 For ESI Type 0: The esi is directly configured by the
                                 operator.
                 For ESI Type 1: The auto-mode must be used.
                 For ESI Type 2: The auto-mode must be used.
                 For ESI Type 3: The directly-assigned or auto-mode must
                                 be used.
                 For ESI Type 4: The directly-assigned or auto-mode must
                                 be used.
                 For ESI Type 5: The directly-assigned or auto-mode must
                                 be used.";
              case directly-assigned {
                description
                  "Explicitly assign an ESI value.";
                leaf ethernet-segment-identifier {
                  type yang:hex-string {
                    length "29";
                  }
                  description
                    "10-octet ESI.";
                }
              }
              case auto-assigned {
                description
                  "The ESI is auto-assigned.";
                container esi-auto {
                  description
                    "The ESI is auto-assigned.";
                  choice auto-mode {
                    description
                      "Indicates the auto-assignment mode. ESI can be
                       automatically assigned either with or without
                       indicating a pool from which the ESI should be
                       taken.

                       For both cases, the server will auto-assign an
                       ESI value 'auto-assigned-ESI' and use that value
                       operationally.";
                    case from-pool {
                      leaf esi-pool-name {
                        type string;
                        description
                          "The auto-assignment will be made from the
                           pool identified by the ESI-pool-name.";
                      }
                    }
                    case full-auto {
                      leaf auto {
                        type empty;
                        description
                          "Indicates an ESI is fully auto-assigned.";
                      }
                    }
                  }
                  leaf auto-ethernet-segment-identifier {
                    type yang:hex-string {
                      length "29";
                    }
                    config false;
                    description
                      "The value of the auto-assigned ESI.";
                  }
                }
              }
            }
            leaf esi-redundancy-mode {
              type identityref {
                base evpn-redundancy-mode;
              }
              description
                "Indicates the EVPN redundancy mode for a multihomed
                 CE.";
              reference
                "RFC 7432: BGP MPLS-Based Ethernet VPN, Section 14.1";
            }
            container df-election {
              description
                "Top container for the DF election method properties.";
              leaf df-election-method {
                type identityref {
                  base df-election-methods;
                }
                default "default-7432";
                description
                  "Specifies the DF election method.";
                reference
                  "RFC 8584: Framework for Ethernet VPN Designated
                             Forwarder Election Extensibility";
              }
              leaf preference {
                when "../df-election-method = 'preference'" {
                  description
                    "The preference value is only applicable
                     to the preference based method.";
                }
                type uint16;
                description
                  "Defines a 2-octet value that indicates the PE
                   preference to become the DF in the ES.";
                reference
                  "RFC 8584: Framework for Ethernet VPN Designated
                             Forwarder Election Extensibility";
              }
              leaf revertive {
                when "../df-election-method = 'preference'" {
                  description
                    "The revertive value is only applicable
                     to the preference method.";
                }
                type boolean;
                default "true";
                description
                  "The 'preempt' or 'revertive' behavior. This
                   option allows a non-revertive behavior in the
                   DF election.";
                reference
                  "RFC 8584: Framework for Ethernet VPN Designated
                             Forwarder Election Extensibility";
              }
              leaf election-wait-time {
                type uint32;
                description
                  "Election wait timer.";
                reference
                  "RFC 8584: Framework for Ethernet VPN Designated
                             Forwarder Election Extensibility";
              }
            }
            leaf split-horizon-filtering {
              type boolean;
              description
                "Controls split-horizon filtering.

                 In order to achieve split-horizon filtering, every
                 Broadcast, unknown unicast, or multicast (BUM)
                 packet originating from a non-DF PE is encapsulated
                 with an MPLS label that identifies the origin ES.";
              reference
                "RFC 7432: BGP MPLS-Based Ethernet VPN, Section 5";
            }
          }
        }
        container underlay-transport {
          description
            "Container for the underlay transport.";
          uses vpn-common:underlay-transport;
        }
        uses vpn-common:service-status;
        container vpn-nodes {
          description
            "Set of VPN nodes that are involved in the L2NM.";
          list vpn-node {
            key "vpn-node-id";
            description
              "Container of the VPN nodes.";
            leaf vpn-node-id {
              type vpn-common:vpn-id;
              description
                "Sets the indentifier of the VPN node.";
            }
            leaf description {
              type string;
              description
                "Textual description of a VPN node.";
            }
            leaf ne-id {
              type string;
              description
                "Indicates the node's IP address.";
            }
            leaf role {
              type identityref {
                base vpn-common:role;
              }
              default "vpn-common:any-to-any-role";
              description
                "Role of the VPN node in the VPN.";
            }
            leaf router-id {
              type rt-types:router-id;
              description
                "A 32-bit number in the dotted-quad format that is
                 used to uniquely identify a node within an
                 autonomous system (AS). ";
            }
            container active-global-parameters-profiles {
              description
                "Container for a list of global parameters profiles.";
              list global-parameters-profile {
                key "profile-id";
                description
                  "List of active global parameters profiles.";
                leaf profile-id {
                  type leafref {
                    path "/l2vpn-ntw/vpn-services/vpn-service"
                       + "/global-parameters-profiles"
                       + "/global-parameters-profile/profile-id";
                  }
                  description
                    "Points to a global profile defined at the
                     service level.";
                }
                uses global-parameters-profile;
              }
            }
            uses vpn-common:service-status;
            container bgp-auto-discovery {
              when "/l2vpn-ntw/vpn-services/vpn-service"
                 + "/bgp-ad-enabled = 'true'" {
                description
                  "Only applies when BGP auto-discovery is enabled.";
              }
              description
                "BGP is used for auto-discovery.";
              choice bgp-type {
                description
                  "Choice for the BGP type.";
                case l2vpn-bgp {
                  description
                    "Container for BGP L2VPN.";
                  leaf vpn-id {
                    type vpn-common:vpn-id;
                    description
                      "VPN Identifier. This identifier serves to unify
                       components of a given VPN for the sake of
                       auto-discovery.";
                    reference
                      "RFC 6624: Layer 2 Virtual Private Networks Using
                                 BGP for Auto-Discovery and Signaling";
                  }
                }
                case evpn-bgp {
                  when "derived-from-or-self(/l2vpn-ntw/vpn-services"
                     + "/vpn-service/vpn-type, 'vpn-common:vpws-evpn') "
                     + "or derived-from-or-self(/l2vpn-ntw/vpn-services"
                     + "/vpn-service/vpn-type, 'vpn-common:pbb-evpn') "
                     + "or derived-from-or-self(/l2vpn-ntw/vpn-services"
                     + "/vpn-service/vpn-type, 'vpn-common:mpls-evpn') "
                     + "or derived-from-or-self(/l2vpn-ntw/vpn-services"
                     + "/vpn-service/vpn-type, 'vpn-common:vxlan-evpn')" {
                    description
                      "Can only be used when EVPN is used.";
                  }
                  description
                    "Container for MP-BGP L2VPN.";
                  leaf evpn-type {
                    type identityref {
                      base evpn-type;
                    }
                    description
                      "EVPN type.";
                  }
                  leaf auto-rt-enable {
                    type boolean;
                    default "false";
                    description
                      "Enables/disabled RT auto-derivation based on
                       the ASN and Ethernet Tag ID.";
                    reference
                      "RFC 7432: BGP MPLS-Based Ethernet VPN,
                                 Section 7.10.1";
                  }
                  leaf auto-route-target {
                    when "./auto-rt-enable = 'true'" {
                      description
                        "Can only be used when auto-RD is enabled.";
                    }
                    type rt-types:route-target;
                    config false;
                    description
                      "The value of the auto-assigned RT.";
                  }
                }
              }
              uses vpn-common:route-distinguisher;
              uses vpn-common:vpn-route-targets;
            }
            container signaling-option {
              description
                "List of VPN signaling options.";
              leaf mtu-pw {
                type uint16;
                description
                  "Sets the PW MTU.";
              }
              leaf mtu-allow-mismatch {
                type boolean;
                description
                  "When set to true, it allows MTU mismatch.";
                reference
                  "RFC 4667: Layer 2 Virtual Private Network (L2VPN)
                             Extensions for Layer 2 Tunneling
                             Protocol (L2TP), Section 4.3";
              }
              leaf type {
                type leafref {
                  path "/l2vpn-ntw/vpn-services/vpn-service"
                     + "/signaling-type";
                }
                description
                  "VPN signaling type.";
              }
              choice signaling-option {
                description
                  "Choice for the signaling-option.";
                case bgp {
                  when "./type = 'vpn-common:bgp-signaling'" {
                    description
                      "Only applies when VPN signaling type is BGP.";
                  }
                  description
                    "BGP is used as the signaling protocol.";
                  choice bgp-type {
                    description
                      "Choice for the BGP type.";
                    case l2vpn-bgp {
                      description
                        "Container for BGP L2VPN.";
                      leaf ce-id {
                        type uint16;
                        description
                          "The PE must know the set of virtual circuits
                           connecting it to the CE and a CE ID
                           identifying the CE within the VPN.";
                        reference
                          "RFC 6624: Layer 2 Virtual Private Networks
                                     Using BGP for Auto-Discovery and
                                     Signaling";
                      }
                      leaf ce-range {
                        type uint16;
                        description
                          "Determines the number of remote CEs with
                           which  a given CE can communicate in the
                            contex of a VPN.";
                        reference
                          "RFC 6624: Layer 2 Virtual Private Networks
                                     Using BGP for Auto-Discovery and
                                     Signaling";
                      }
                      leaf pw-encapsulation-type {
                        type identityref {
                          base iana-bgp-l2-encaps:bgp-l2-encaps-type;
                        }
                        description
                          "PW encapsulation type.";
                      }
                    }
                    case evpn-bgp {
                      description
                        "Container for MP BGP L2VPN.";
                      leaf evpn-type {
                        type leafref {
                          path "/l2vpn-ntw/vpn-services/vpn-service"
                             + "/vpn-nodes/vpn-node/bgp-auto-discovery"
                             + "/evpn-type";
                        }
                        description
                          "EVPN type.";
                      }
                      leaf service-interface-type {
                        type identityref {
                          base evpn-service-type;
                        }
                        description
                          "EVPN service interface type.";
                      }
                      container evpn-policies {
                        description
                          "Includes a set of EVPN policies such as those
                           related to handling MAC addresses.";
                        leaf mac-learning-mode {
                          type identityref {
                            base mac-learning-mode;
                          }
                          description
                            "Indicates through which plane MAC addresses
                             are advertised.";
                        }
                        leaf ingress-replication {
                          type boolean;
                          description
                            "Controles whether ingress replication is
                             enabled/disabled.";
                          reference
                            "RFC 7432: BGP MPLS-Based Ethernet VPN,
                                       Section 8.3.1.1";
                        }
                        leaf p2mp-replication {
                          type boolean;
                          description
                            "Controles whether P2MP replication is
                             enabled/disabled.";
                          reference
                            "RFC 7432: BGP MPLS-Based Ethernet VPN,
                                       Section 8.3.1.2";
                        }
                        container arp-proxy {
                          if-feature "vpn-common:ipv4";
                          description
                            "Top container for the ARP Proxy";
                          leaf enable {
                            type boolean;
                            default "false";
                            description
                              "Enables (when set to 'true') or disables
                                (when set to 'false') ARP proxy.";
                          }
                          leaf arp-suppression {
                            type boolean;
                            default "false";
                            description
                              "Enables (when set to 'true') or disables
                               (when set to 'false') ARP suppression.";
                            reference
                              "RFC 7432: BGP MPLS-Based Ethernet VPN";
                          }
                          leaf ip-mobility-threshold {
                            type uint16;
                            description
                              "Enable (TRUE) or disable (FALSE). It is
                               possible for a given host or end-station
                               (as defined by its IP address) to move
                               from one Ethernet segment to another. The
                               number of IP mobility events that
                               are detected for a given IP address within
                               the detection-threshold before it is
                               identified as a duplicate IP address.
                               Once the detection threshold is reached,
                               updates for the IP address are
                               suppressed.";
                          }
                          leaf duplicate-ip-detection-interval {
                            type uint16;
                            description
                              "The time interval used in detecting a
                               duplicate IP address. Duplicate IP
                               address detection number of host moves
                               allowed within interval period";
                          }
                        }
                        container nd-proxy {
                          if-feature "vpn-common:ipv6";
                          description
                            "Top container for the ND Proxy";
                          leaf enable {
                            type boolean;
                            default "false";
                            description
                              "Enables (when set to 'true') or disables
                               (when set to 'false') ND proxy. If true
                               the NDP queries for an IP address that
                               is not on that network are suppressed.
                               NDP suppression is a technique that is
                               used to reduce the amount of NDP packets
                               flooding within individual segments,
                               that is between hosts connected to the
                               same logical switch.";
                          }
                          leaf nd-suppression {
                            type boolean;
                            default "false";
                            description
                              "Enables (when set to 'true') or disables
                               (when set to 'false') ND suppression.";
                          }
                          leaf ip-mobility-threshold {
                            type uint16;
                            description
                              "Enable (TRUE) or disable (FALSE). It is
                               possible for a given host or end-station
                               (as defined by its IP address) to move
                               from one ES to another. The number of IP
                               address mobility events that are detected
                               for a  given IP address within the
                               detection-threshold before it is
                               identified as a duplicate IP address.
                               Once the detection threshold is reached,
                               updates for the IP address are
                               suppressed.";
                          }
                          leaf duplicate-ip-detection-interval {
                            type uint16;
                            description
                              "The time interval used in detecting a
                               duplicate IP address. Duplicate IP address
                               detection number of host moves allowed
                               within interval period";
                          }
                        }
                        leaf underlay-multicast {
                          type boolean;
                          default "false";
                          description
                            "Enables (when set to 'true') or disables
                             (when set to 'false') underlay multicast.";
                        }
                        leaf flood-unknown-unicast-supression {
                          type boolean;
                          default "false";
                          description
                            "Enables (when set to 'true') or disables
                             (when set to 'false') unknown flood unicast
                             suppression.";
                        }
                        leaf vpws-vlan-aware {
                          type boolean;
                          default "false";
                          description
                            "Enables (when set to 'true') or disables
                             (when set to 'false') VPWS VLAN-aware.";
                        }
                        container bum-management {
                          description
                            "broadcast-unknown-unicast-multicast
                             management";
                          leaf discard-broadcast {
                            type boolean;
                            description
                              "Discards broadcast, when enabled.";
                          }
                          leaf discard-unknown-multicast {
                            type boolean;
                            description
                              "Discards unknown multicast, when
                               enabled.";
                          }
                          leaf discard-unknown-unicast {
                            type boolean;
                            description
                              "Discards unknown unicast, when enabled.";
                          }
                        }
                        container pbb {
                          description
                            "PBB parameters container.";
                          reference
                            "IEEE 802.1ah Provider Backbone Bridge";
                          leaf backbone-src-mac {
                            type yang:mac-address;
                            description
                              "Includes backbone-src-mac.";
                          }
                        }
                      }
                    }
                  }
                }
                case ldp {
                  when "./type = 'vpn-common:ldp-signaling'" {
                    description
                      "Only applies when VPN signaling type is Target
                       LDP.";
                  }
                  description
                    "Container of T-LDP PW configurations";
                  leaf t-ldp-pw-type {
                    type identityref {
                      base t-ldp-pw-type;
                    }
                    description
                      "T-LDP PW type.";
                  }
                  leaf encapsulation-type {
                    type identityref {
                      base vpn-common:encapsulation-type;
                    }
                    description
                      "PW encapsulation type.";
                  }
                  list ac-pw-list {
                    key "peer-addr vc-id";
                    description
                      "List of AC and PW bindings.";
                    leaf peer-addr {
                      type inet:ip-address;
                      description
                        "Indicates the peer's IP address.";
                    }
                    leaf vc-id {
                      type vpn-common:vpn-id;
                      description
                        "VC label used to identify PW.";
                    }
                    leaf pw-type {
                      type identityref {
                        base vpn-common:vpn-topology;
                      }
                      description
                        "PW topology type.";
                    }
                    leaf pw-priority {
                      type uint32;
                      description
                        "Defines the priority for the PW.
                         The higher the pw-priority value,
                         the higher the preference of the PW will be.";
                    }
                  }
                  container qinq {
                    when "derived-from-or-self(../t-ldp-pw-type, "
                       + "'hvpls')" {
                      description
                        "Only applies when t-ldp pw type is h-vpls.";
                    }
                    description
                      "Container for QinQ.";
                    leaf s-tag {
                      type uint32;
                      description
                        "S-TAG.";
                    }
                    leaf c-tag {
                      type uint32;
                      description
                        "C-TAG.";
                    }
                  }
                }
                case l2tp {
                  when "./type = 'vpn-common:l2tp-signaling'" {
                    description
                      "Applies when VPN signaling type is L2TP.";
                  }
                  description
                    "Container for l2tp pw";
                  leaf router-id {
                    type rt-types:router-id;
                    description
                      "A 32-bit number in the dotted-quad format that is
                       used to uniquely identify a node within an
                       autonomous system.";
                    reference
                      "RFC 4667: Layer 2 Virtual Private Network (L2VPN)
                                  Extensions for Layer 2 Tunneling
                                  Protocol (L2TP), Section 4.2";
                  }
                  leaf pseudowire-type {
                    type identityref {
                      base iana-pw-types:iana-pw-types;
                    }
                    description
                      "Encapsulation type.";
                    reference
                      "RFC 4667: Layer 2 Virtual Private Network (L2VPN)
                                 Extensions for Layer 2 Tunneling
                                 Protocol (L2TP), Section 4.2";
                  }
                  leaf agi {
                    type uint32;
                    description
                      "Attachment Group Identifier.";
                    reference
                      "RFC 4667: Layer 2 Virtual Private Network (L2VPN)
                                 Extensions for Layer 2 Tunneling
                                 Protocol (L2TP), Section 4.3";
                  }
                  leaf saii {
                    type uint8;
                    description
                      "Source Attachment Individual Identifier.";
                    reference
                      "RFC 4667: Layer 2 Virtual Private Network (L2VPN)
                                 Extensions for Layer 2 Tunneling
                                 Protocol (L2TP), Section 3";
                  }
                  list remote-forwarders {
                    key "peer-addr taii";
                    description
                      "List of allowed Target AII and peers.";
                    reference
                      "RFC 4667: Layer 2 Virtual Private Network (L2VPN)
                                 Extensions for Layer 2 Tunneling
                                 Protocol (L2TP), Section 5";
                    leaf peer-addr {
                      type inet:ip-address;
                      description
                        "Indicates the peer forwarder's IP address.";
                    }
                    leaf taii {
                      type uint8;
                      description
                        "Target Attachment Individual Identifier.";
                      reference
                        "RFC 4667: Layer 2 Virtual Private Network
                                   (L2VPN) Extensions for Layer 2
                                   Tunneling  Protocol (L2TP),
                                   Section 3";
                    }
                    /*leaf vc-id {
                      type string;
                      description
                        "VC label used to identify PW.";
                    }
                    leaf pw-priority {
                      type uint32;
                      description
                        "PW priority.";
                    }*/
                  }
                }
              }
            }
            container vpn-network-accesses {
              description
                "List of VPN Nodes.";
              list vpn-network-access {
                key "id";
                description
                  "List of VPN Network Accesses.";
                leaf id {
                  type vpn-common:vpn-id;
                  description
                    "Identifier of network access";
                }
                leaf description {
                  type string;
                  description
                    "String to describe the element.";
                }
                leaf port-id {
                  type vpn-common:vpn-id;
                  description
                    "NE Port-id";
                }
                leaf global-parameters-profile {
                  type leafref {
                    path "/l2vpn-ntw/vpn-services/vpn-service/vpn-nodes"
                       + "/vpn-node/active-global-parameters-profiles"
                       + "/global-parameters-profile/profile-id";
                  }
                  description
                    "An identifier of an active VPN instance profile.";
                }
                uses vpn-common:service-status;
                container connection {
                  description
                    "Container for bearer and AC";
                  leaf l2-termination-point {
                    type vpn-common:vpn-id;
                    description
                      "Specifies a reference to a local layer 2
                       termination point such as a layer 2
                       sub-interface.";
                  }
                  leaf local-bridge-reference {
                    type vpn-common:vpn-id;
                    description
                      "Specifies a local bridge reference to
                       accommodate, for example, implementations
                       that require internal bridging.
                       A reference may be a local bridge domain.";
                  }
                  leaf bearer-reference {
                    if-feature "vpn-common:bearer-reference";
                    type string;
                    description
                      "This is an internal reference for the service
                       provider to identify the bearer associated
                       with this VPN.";
                  }
                  container encapsulation {
                    description
                      "Container for layer 2 encapsulation.";
                    leaf type {
                      type identityref {
                        base vpn-common:encapsulation-type;
                      }
                      default "vpn-common:priority-tagged";
                      description
                        "Tagged interface type. By default, the type of
                         the tagged interface is 'priority-tagged'.";
                    }
                    container dot1q {
                      when "derived-from-or-self(../type, "
                         + "'vpn-common:dot1q')" {
                        description
                          "Only applies when the type of the
                           tagged interface is 'dot1q'.";
                      }
                      if-feature "vpn-common:dot1q";
                      description
                        "Tagged interface.";
                      leaf tag-type {
                        type identityref {
                          base vpn-common:tag-type;
                        }
                        default "vpn-common:c-vlan";
                        description
                          "Tag type. By default, the tag type is
                           'c-vlan'.";
                      }
                      leaf cvlan-id {
                        type uint16;
                        description
                          "VLAN identifier.";
                      }
                      container rewrite {
                        description
                          "Set the tag rewriting policy for this
                           EFP";
                        choice tag-choice {
                          description
                            "Select the tag rewriting policy for this
                             EFP";
                          leaf pop {
                            type enumeration {
                              enum 1;
                              enum 2;
                            }
                            description
                              "Remove one or more tags";
                          }
                          leaf push {
                            type empty;
                            description
                              "Push one or more tags";
                          }
                          leaf translate {
                            type enumeration {
                              enum 1-to-1;
                              enum 1-to-2;
                              enum 2-to-1;
                              enum 2-to-2;
                            }
                            description
                              "Replace tags with other tags.";
                          }
                        }
                        leaf cvlan-id {
                          when 'not(../pop)';
                          type uint16;
                          description
                            "<1-4094> - Push a Dot1Q vlan tag";
                        }
                        leaf mode {
                          type enumeration {
                            enum symmetric;
                          }
                          description
                            "TBC";
                        }
                      }
                    }
                    container priority-tagged {
                      when "derived-from-or-self(../type, "
                         + "'vpn-common:priority-tagged')" {
                        description
                          "Only applies when the type of the
                           tagged interface is 'priority-tagged'.";
                      }
                      description
                        "Priority tagged.";
                      leaf tag-type {
                        type identityref {
                          base vpn-common:tag-type;
                        }
                        default "vpn-common:c-vlan";
                        description
                          "Tag type. By default, the tag type is
                           'c-vlan'.";
                      }
                    }
                    container qinq {
                      when "derived-from-or-self(../type, "
                         + "'vpn-common:qinq')" {
                        description
                          "Only applies when the type of the tagged
                           interface is QinQ.";
                      }
                      if-feature "vpn-common:qinq";
                      description
                        "Includes QinQ parameters.";
                      leaf tag-type {
                        type identityref {
                          base vpn-common:tag-type;
                        }
                        default "vpn-common:c-s-vlan";
                        description
                          "Tag type. By default, the tag type is
                           'c-s-vlan'.";
                      }
                      leaf svlan-id {
                        type uint16;
                        mandatory true;
                        description
                          "SVLAN identifier.";
                      }
                      leaf cvlan-id {
                        type uint16;
                        mandatory true;
                        description
                          "CVLAN identifier.";
                      }
                    }
                  }
                  container lag-interface {
                    if-feature "vpn-common:lag-interface";
                    description
                      "Container of LAG interface attributes
                       configuration";
                    list lag-interface {
                      key "lag-interface-number";
                      description
                        "List of LAG interfaces";
                      leaf lag-interface-number {
                        type uint32;
                        description
                          "LAG interface number";
                      }
                      container lacp {
                        description
                          "LACP";
                        leaf lacp-state {
                          type boolean;
                          description
                            "LACP on/off";
                        }
                        leaf lacp-mode {
                          type boolean;
                          description
                            "LACP mode";
                        }
                        leaf lacp-speed {
                          type boolean;
                          description
                            "LACP speed";
                        }
                        leaf mini-link {
                          type uint32;
                          description
                            "The minimum aggregate bandwidth for a
                             LAG";
                        }
                        leaf system-id {
                          type yang:mac-address;
                          description
                            "Indicates the System ID used by LACP.";
                        }
                        leaf admin-key {
                          type uint16;
                          description
                            "Indicates the value of the key used for the
                             aggregate interface.";
                        }
                        leaf system-priority {
                          type uint16 {
                            range "0..65535";
                          }
                          default "32768";
                          description
                            "Indicates the LACP priority for the
                             system.";
                        }
                        container member-link-list {
                          description
                            "Container of Member link list";
                          list member-link {
                            key "name";
                            description
                              "Member link";
                            leaf name {
                              type string;
                              description
                                "Member link name";
                            }
                            leaf port-speed {
                              type uint32;
                              description
                                "Port speed";
                            }
                            leaf mode {
                              type identityref {
                                base vpn-common:neg-mode;
                              }
                              description
                                "Negotiation mode";
                            }
                            leaf link-mtu {
                              type uint32;
                              description
                                "Link MTU size.";
                            }
                            container oam-802.3ah-link {
                              if-feature "oam-3ah";
                              description
                                "Container for oam 802.3 ah link.";
                              leaf enable {
                                type boolean;
                                description
                                  "Indicate whether support oam 802.3 ah
                                   link";
                              }
                            }
                          }
                        }
                        leaf flow-control {
                          type string;
                          description
                            "Flow control";
                        }
                        leaf lldp {
                          type boolean;
                          description
                            "LLDP";
                        }
                      }
                    }
                    container split-horizon {
                      description
                        "Configuration with split horizon enabled";
                      leaf group-name {
                        type string;
                        description
                          "group-name of the Split Horizon";
                      }
                    }
                  }
                }
                container vpws-service-instance {
                  when "derived-from-or-self(/l2vpn-ntw/vpn-services/vpn-service"
                     + "/vpn-nodes/vpn-node/bgp-auto-discovery/evpn-type, "
                     + "'evpn-vpws')" {
                    description
                      "Only applies for EVPN-VPWS.";
                  }
                  description
                    "Local and remote VPWS Service Instance (VSI)";
                  reference
                    "RFC 8214: Virtual Private Wire Service Support
                               in Ethernet VPN";
                  choice local-vsi-choice {
                    description
                      "Choices for assigning local VSI.";
                    case directly-assigned {
                      description
                        "Explicitly assign a local VSI.";
                      leaf local-vpws-service-instance {
                        type uint32 {
                          range "1..16777215";
                        }
                        description
                          "Indicates the assigned local VSI.";
                      }
                    }
                    case auto-assigned {
                      description
                        "The local VSI is auto-assigned.";
                      container local-vsi-auto {
                        description
                          "The local VSI is auto-assigned.";
                        choice auto-mode {
                          description
                            "Indicates the auto-assignment mode of
                             local VSI. VSI can be automatically
                             assigned either with or without
                             indicating a pool from which the VSI
                             should be taken.

                             For both cases, the server will
                             auto-assign a local VSI value and use
                             that value.";
                          case from-pool {
                            leaf vsi-pool-name {
                              type string;
                              description
                                "The auto-assignment will be made
                                 from this pool.";
                            }
                          }
                          case full-auto {
                            leaf auto {
                              type empty;
                              description
                                "Indicates that a local VSI is
                                 fully auto-assigned.";
                            }
                          }
                        }
                        leaf auto-local-vsi {
                          type uint32 {
                            range "1..16777215";
                          }
                          config false;
                          description
                            "The value of the auto-assigned local
                             VSI.";
                        }
                      }
                    }
                  }
                  choice remote-vsi-choice {
                    description
                      "Choice for assigning the remote VSI.";
                    case directly-assigned {
                      description
                        "Explicitly assign a remote VSI.";
                      leaf remote-vpws-service-instance {
                        type uint32 {
                          range "1..16777215";
                        }
                        description
                          "Indicates the value of the remote
                           VSI.";
                      }
                    }
                    case auto-assigned {
                      description
                        "The remote VSI is auto-assigned.";
                      container remote-vsi-auto {
                        description
                          "The remote VSI is auto-assigned.";
                        choice auto-mode {
                          description
                            "Indicates the auto-assignment mode
                             of remote VSI. VSI can be
                             automatically assigned either withor
                             without indicating a pool from which
                             the VSI should be taken.

                             For both cases, the server will
                             auto-assign a remote VSI value and use
                             that value.";
                          case from-pool {
                            leaf vsi-pool-name {
                              type string;
                              description
                                "The auto-assignment will be made
                                 from this pool.";
                            }
                          }
                          case full-auto {
                            leaf auto {
                              type empty;
                              description
                                "Indicates that a remote VSI is fully
                                 auto-assigned.";
                            }
                          }
                        }
                        leaf auto-remote-vsi {
                          type uint32 {
                            range "1..16777215";
                          }
                          config false;
                          description
                            "The value of the auto-assigned remote
                             VSI.";
                        }
                      }
                    }
                  }
                }
                list group {
                  key "group-id";
                  description
                    "List of group-ids.";
                  leaf group-id {
                    type string;
                    description
                      "Indicates the group-id to which the network
                       access belongs to.";
                  }
                  leaf group-color {
                    type string;
                    description
                      "Group color associated with a particular VPN.";
                  }
                  leaf precedence {
                    type identityref {
                      base precedence-type;
                    }
                    description
                      "Defining service redundancy in transport
                       network.";
                  }
                  leaf ethernet-segment-identifier {
                    type leafref {
                      path "/l2vpn-ntw/vpn-services/vpn-service"
                         + "/ethernet-segments/ethernet-segment/name";
                    }
                    description
                      "Reference to the ESI associated to the VPN
                       network access.";
                  }
                }
                container ethernet-service-oam {
                  description
                    "Container for Ethernet service OAM.";
                  leaf md-name {
                    type string;
                    description
                      "Maintenance domain name.";
                  }
                  leaf md-level {
                    type uint8;
                    description
                      "Maintenance domain level.";
                  }
                  container cfm-802.1-ag {
                    description
                      "Container of 802.1ag CFM configurations.";
                    list n2-uni-c {
                      key "maid";
                      description
                        "List of UNI-N to UNI-C.";
                      uses cfm-802-grouping;
                    }
                    list n2-uni-n {
                      key "maid";
                      description
                        "List of UNI-N to UNI-N.";
                      uses cfm-802-grouping;
                    }
                  }
                  uses y-1731;
                }
                container service {
                  description
                    "Container for service";
                  leaf mtu {
                    type uint32;
                    description
                      "MTU, it is also known as the maximum
                       transmission unit or maximum frame size. When a
                       frame is larger than the MTU, it is broken down,
                       or fragmented, into smaller pieces by the
                       network protocol to accommodate the MTU of the
                       network";
                  }
                  container svc-input-bandwidth {
                    if-feature "vpn-common:input-bw";
                    description
                      "From the PE perspective, the service input
                       bandwidth of the connection.";
                    list input-bandwidth {
                      key "type";
                      description
                        "List for input bandwidth data nodes.";
                      leaf type {
                        type identityref {
                          base vpn-common:bw-type;
                        }
                        description
                          "Indicates the bandwidth type.";
                      }
                      leaf cos-id {
                        if-feature "vpn-common:qos";
                        type uint8;
                        description
                          "Identifier of the Class of Service (CoS),
                           indicated by DSCP or a CE-CLAN
                           CoS (802.1p) value in the service frame.";
                      }
                      leaf cir {
                        type uint64;
                        description
                          "Committed Information Rate. The maximum number
                           of bits that a port can receive or send during
                           one-second over an interface.";
                      }
                      leaf cbs {
                        type uint64;
                        description
                          "Committed Burst Size. CBS controls the bursty
                           nature of the traffic. Traffic that does not
                           use theconfigured CIR accumulates credits
                           until the credits reach the configured CBS.";
                      }
                      leaf eir {
                        type uint64;
                        description
                          "Excess Information Rate, i.e., excess frame
                           delivery allowed not subject to SLA. The
                           traffic rate can be limited by EIR.";
                      }
                      leaf ebs {
                        type uint64;
                        description
                          "Excess Burst Size. The bandwidth available
                           for burst traffic from the EBS is subject to
                           the amount of bandwidth that is accumulated
                           during periods when traffic allocated by the
                           EIR policy is not used.";
                      }
                      leaf pir {
                        type uint64;
                        description
                          "Peak Information Rate, i.e., maixmum frame
                           delivery allowed. It is equal to or less
                           than sum of CIR and EIR.";
                      }
                      leaf pbs {
                        type uint64;
                        units "bytes per second";
                        description
                          "Peak Burst Size.";
                      }
                    }
                  }
                  container svc-output-bandwidth {
                    if-feature "vpn-common:output-bw";
                    description
                      "From the PE perspective, the service output
                       bandwidth of the connection.";
                    list output-bandwidth {
                      key "type";
                      description
                        "List for output bandwidth";
                      leaf type {
                        type identityref {
                          base vpn-common:bw-type;
                        }
                        description
                          "Bandwidth Type";
                      }
                      leaf cos-id {
                        if-feature "vpn-common:qos";
                        type uint8;
                        description
                          "Identifier of the CoS, indicated by 
                           DSCP or a CE-CLAN CoS (802.1p) value in 
                           the service frame.";
                      }
                      leaf cir {
                        type uint64;
                        description
                          "Committed Information Rate. The maximum
                           number of bits that a port can receive or
                           send during one-second over an interface.";
                      }
                      leaf cbs {
                        type uint64;
                        description
                          "Committed Burst Size. CBS controls the bursty
                           nature of the traffic. Traffic that does not
                           use the configured CIR accumulates credits
                           until the credits reach the configured CBS.";
                      }
                      leaf eir {
                        type uint64;
                        description
                          "Excess Information Rate, i.e., excess frame
                           delivery allowed not subject to SLA. The
                           traffic rate can be limited by EIR.";
                      }
                      leaf ebs {
                        type uint64;
                        description
                          "Excess Burst Size. The bandwidth available
                           for burst traffic from the EBS is subject to
                           the amount of bandwidth that is accumulated
                           during periods when traffic allocated by the
                           EIR policy is not used.";
                      }
                      leaf pir {
                        type uint64;
                        description
                          "Peak Information Rate, i.e., maixmum frame
                           delivery allowed. It is equal to or less than
                           sum of CIR and EIR.";
                      }
                      leaf pbs {
                        type uint64;
                        units "bytes per second";
                        description
                          "Peak Burst Size.";
                      }
                    }
                  }
                  container qos {
                    if-feature "vpn-common:qos";
                    description
                      "QoS configuration.";
                    container qos-classification-policy {
                      description
                        "Configuration of the traffic classification
                         policy.";
                      list rule {
                        key "id";
                        ordered-by user;
                        description
                          "List of classification rules.";
                        leaf id {
                          type string;
                          description
                            "A description identifying the QoS
                             classification policy rule.";
                        }
                        choice match-type {
                          default "match-flow";
                          description
                            "Choice for classification.";
                          case match-flow {
                            container match-flow {
                              description
                                "Describes flow-matching criteria.";
                              leaf dscp {
                                type inet:dscp;
                                description
                                  "DSCP value.";
                              }
                              leaf dot1q {
                                type uint16;
                                description
                                  "802.1Q matching. It is a VLAN tag
                                   added into a frame.";
                              }
                              leaf pcp {
                                type uint8 {
                                  range "0..7";
                                }
                                description
                                  "PCP value.";
                              }
                              leaf src-mac-address {
                                type yang:mac-address;
                                description
                                  "Source MAC address.";
                              }
                              leaf dst-mac-address {
                                type yang:mac-address;
                                description
                                  "Destination MAC address.";
                              }
                              leaf color-type {
                                type identityref {
                                  base color-type;
                                }
                                description
                                  "Color type.";
                              }
                              leaf any {
                                type empty;
                                description
                                  "Allows all.";
                              }
                            }
                          }
                          case match-application {
                            leaf match-application {
                              type identityref {
                                base vpn-common:customer-application;
                              }
                              description
                                "Defines the application to match.";
                            }
                          }
                        }
                        leaf target-class-id {
                          type string;
                          description
                            "Identification of the CoS.
                             This identifier is internal to the
                             administration.";
                        }
                      }
                    }
                    container qos-profile {
                      description
                        "QoS profile configuration.";
                      list qos-profile {
                        key "profile";
                        description
                          "QoS profile.
                           Can be standard profile or customized
                           profile.";
                        leaf profile {
                          type leafref {
                            path "/l2vpn-ntw/vpn-profiles"
                               + "/valid-provider-identifiers"
                               + "/qos-profile-identifier/id";
                          }
                          description
                            "QoS profile to be used.";
                        }
                        leaf direction {
                          type identityref {
                            base vpn-common:qos-profile-direction;
                          }
                          default "vpn-common:both";
                          description
                            "The direction to which the QoS profile
                             is applied.";
                        }
                      }
                    }
                  }
                  container mac-policies {
                    description
                      "Container for MAC-related policies.";
                    list access-control-list {
                      key "name";
                      description
                        "Container for access control List.";
                      leaf name {
                        type string;
                        description
                          "Specifies the name of the ACL.";
                      }
                      leaf-list src-mac-address {
                        type yang:mac-address;
                        description
                          "Specifies the source MAC address.";
                      }
                      leaf-list src-mac-address-mask {
                        type yang:mac-address;
                        description
                          "Specifies the source MAC address mask.";
                      }
                      leaf-list dst-mac-address {
                        type yang:mac-address;
                        description
                          "Specifies the destination MAC address.";
                      }
                      leaf-list dst-mac-address-mask {
                        type yang:mac-address;
                        description
                          "Specifies the destination MAC address mask.";
                      }
                      leaf action {
                        type identityref {
                          base mac-action;
                        }
                        default "drop";
                        description
                          "Specifies the filtering action.";
                      }
                      leaf rate-limit {
                        when "derived-from-or-self(./action, 'flood')" {
                          description
                            "Rate-limit is valid only when the action is
                             to accept the matching frame.";
                        }
                        type decimal64 {
                          fraction-digits 2;
                        }
                        units "bytes per second";
                        description
                          "Specifies how to rate-limit the traffic.";
                      }
                    }
                    container mac-loop-prevention {
                      description
                        "Container of MAC loop prevention.";
                      leaf window {
                        type uint32;
                        units "seconds";
                        default "180";
                        description
                          "The timer when a MAC mobility event is
                           detected.";
                      }
                      leaf frequency {
                        type uint32;
                        default "5";
                        description
                          "The number of times to detect MAC duplication,
                           where a 'duplicate MAC address' situation has
                           occurred and the duplicate MAC address has
                           been added to a list of duplicate MAC
                           addresses.";
                      }
                      leaf retry-timer {
                        type uint32;
                        units "seconds";
                        description
                          "The retry timer. When the retry timer expires,
                           the duplicate MAC address will be flushed from
                           the MAC-VRF.";
                      }
                      leaf protection-type {
                        type identityref {
                          base loop-prevention-type;
                        }
                        description
                          "Protection type";
                      }
                    }
                    container mac-addr-limit {
                      description
                        "Container of MAC-Addr limit configurations";
                      leaf mac-num-limit {
                        type uint16;
                        description
                          "maximum number of MAC addresses learned from
                           the subscriber for a single service
                           instance.";
                      }
                      leaf time-interval {
                        type uint32;
                        units "milliseconds";
                        description
                          "The aging time of the mac address.";
                      }
                      leaf action {
                        type identityref {
                          base mac-action;
                        }
                        description
                          "specify the action when the upper limit is
                           exceeded: drop the packet, flood the
                           packet, or simply send a warning log
                           message.";
                      }
                    }
                  }
                  container broadcast-unknown-unicast-multicast {
                    description
                      "Container of broadcast, unknown unicast, and
                       multicast configurations";
                    leaf multicast-site-type {
                      type enumeration {
                        enum receiver-only {
                          description
                            "The site only has receivers.";
                        }
                        enum source-only {
                          description
                            "The site only has sources.";
                        }
                        enum source-receiver {
                          description
                            "The site has both sources and receivers.";
                        }
                      }
                      default "source-receiver";
                      description
                        "Type of multicast site.";
                    }
                    list multicast-gp-address-mapping {
                      key "id";
                      description
                        "List of Port to group mappings.";
                      leaf id {
                        type uint16;
                        description
                          "Unique identifier for the mapping.";
                      }
                      leaf vlan-id {
                        type uint32;
                        description
                          "The VLAN ID of the Multicast group.";
                      }
                      leaf mac-gp-address {
                        type yang:mac-address;
                        description
                          "The MAC address of the Multicast group.";
                      }
                      leaf port-lag-number {
                        type uint32;
                        description
                          "The ports/LAGs belonging to the Multicast
                           group.";
                      }
                    }
                    leaf bum-overall-rate {
                      type uint32;
                      description
                        "overall rate for BUM.";
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
<CODE ENDS>           ]]></artwork>
        </figure>
      </section>
    </section>

    <section anchor="Security" title="Security Considerations">
      <t>The YANG modules specified in this document defines schema for data
      that is designed to be accessed via network management protocols such as
      NETCONF <xref target="RFC6241"></xref> or RESTCONF <xref
      target="RFC8040"></xref> . The lowest NETCONF layer is the secure
      transport layer, and the mandatory-to-implement secure transport is
      Secure Shell (SSH) <xref target="RFC6242"></xref>. The lowest RESTCONF
      layer is HTTPS, and the mandatory-to-implement secure transport is TLS
      <xref target="RFC8446"></xref>.</t>

      <t>The Network Configuration Access Control Model (NACM) <xref
      target="RFC8341"></xref> provides the means to restrict access for
      particular NETCONF or RESTCONF users to a preconfigured subset of all
      available NETCONF or RESTCONF protocol operations and content.</t>

      <t>There are a number of data nodes defined in "ietf-l2vpn-ntw" YANG
      module that are writable/creatable/deletable (i.e., config true, which
      is the default). These data nodes may be considered sensitive or
      vulnerable in some network environments. Write operations (e.g.,
      edit-config) and delete operations to these data nodes without proper
      protection or authentication can have a negative effect on network
      operations. These are the subtrees and data nodes and their
      sensitivity/vulnerability in the "ietf-l2vpn-ntw" module: <list
          style="symbols">
          <t>'vpn-service': An attacker who is able to access network nodes
          can undertake various attacks, such as deleting a running L2VPN
          service, interrupting all the traffic of a client. In addition, an
          attacker may modify the attributes of a running service (e.g., QoS,
          bandwidth), leading to malfunctioning of the service and therefore
          to SLA violations. In addition, an attacker could attempt to create
          an L2VPN service or adding a new network access. Such activity can
          be detected by adequately monitoring and tracking network
          configuration changes.</t>
        </list></t>

      <t>Some of the readable data nodes in the "ietf-l2vpn-ntw" YANG module
      may be considered sensitive or vulnerable in some network environments.
      It is thus important to control read access (e.g., via get, get-config,
      or notification) to these data nodes. These are the subtrees and data
      nodes and their sensitivity/vulnerability:</t>

      <t><list style="symbols">
          <t>'customer-name' and 'ip-connection': An attacker can retrieve
          privacy-related information which can be used to track a customer.
          Disclosing such information may be considered as a violation of the
          customer-provider trust relationship.</t>
        </list></t>

      <t>The following summarizes the foreseen risks of using the
      "ietf-l2vpn-ntw" module can be classified into: <list style="symbols">
          <t>Malicious clients attempting to delete or modify VPN
          services.</t>

          <t>Unauthorized clients attempting to create/modify/delete a VPN
          service.</t>

          <t>Unauthorized clients attempting to read VPN service related
          information.</t>
        </list></t>

      <t>Both "iana-bgp-l2-encaps" and "iana-pseudowire-types" modules define
      YANG identities for encapsulation/pseudowires types. These identities
      are intended to be referenced by other YANG modules, and by themselves
      do not expose any nodes which are writable, contain read-only state, or
      RPCs. </t>
    </section>

    <section anchor="IANA" title="IANA Considerations">
      <section title="YANG Modules">
        <t>This document requests IANA to register the following URIs in the
        "ns" subregistry within the "IETF XML Registry" <xref
        target="RFC3688"></xref>:</t>

        <figure>
          <artwork><![CDATA[      URI: urn:ietf:params:xml:ns:yang:iana-bgp-l2-encaps
      Registrant Contact: The IESG.
      XML: N/A; the requested URI is an XML namespace.

      URI: urn:ietf:params:xml:ns:yang:iana-pseudowire-types
      Registrant Contact: The IESG.
      XML: N/A; the requested URI is an XML namespace.

      URI: urn:ietf:params:xml:ns:yang:ietf-l2vpn-ntw
      Registrant Contact: The IESG.
      XML: N/A; the requested URI is an XML namespace.]]></artwork>
        </figure>

        <t>This document requests IANA to register the following YANG modules
        in the "YANG Module Names" subregistry <xref target="RFC6020"></xref>
        within the "YANG Parameters" registry:</t>

        <figure>
          <artwork><![CDATA[      name: iana-bgp-l2-encaps
      namespace: urn:ietf:params:xml:ns:yang:iana-bgp-l2-encaps
      maintained by IANA: Y
      prefix: iana-bgp-l2-encaps
      reference: RFC XXXX

      name: iana-pseudowire-types
      namespace: urn:ietf:params:xml:ns:yang:iana-pseudowire-types
      maintained by IANA: Y
      prefix: iana-pw-types
      reference: RFC XXXX

      name: ietf-l2vpn-ntw
      namespace: urn:ietf:params:xml:ns:yang:ietf-l2vpn-ntw
      maintained by IANA: N
      prefix: l2vpn-ntw
      reference: RFC XXXX]]></artwork>
        </figure>

        <t></t>
      </section>

      <section title="BGP Layer 2 Encapsulation Types">
        <t>This document defines the initial version of the IANA-maintained
        "iana-bgp-l2-encaps" YANG module. IANA is requested to add this note
        for both modules:<list style="empty">
            <t>BGP Layer 2 encapsulation types must not be directly added to
            the "iana-bgp-l2-encaps" YANG module. They must instead be
            respectively added to the "BGP Layer 2 Encapsulation Types"
            registry <xref target="IANA-BGP-L2"></xref>.</t>
          </list></t>

        <t>When a Layer 2 encapsulation type is added to the "BGP Layer 2
        Encapsulation Types" registry, a new "identity" statement must be
        added to the "iana-bgp-l2-encaps" YANG module. The name of the
        "identity" is the lower-case of encapsulation name provided in the
        description. The "identity" statement should have the following
        sub-statements defined:</t>

        <t><list hangIndent="15" style="hanging">
            <t hangText="&quot;base&quot;:">Contains 'bgp-l2-encaps-type'.</t>

            <t hangText="&quot;description&quot;:">Replicates the description
            from the registry.</t>

            <t hangText="&quot;reference&quot;:">Replicates the reference from
            the registry and add the title of the document.</t>
          </list></t>

        <t>Unassigned or reserved values are not present in the module.</t>

        <t>When the "iana-bgp-l2-encaps" YANG module is updated, a new
        "revision" statement must be added in front of the existing revision
        statements.</t>

        <t>IANA is requested to add this note to <xref
        target="IANA-BGP-L2"></xref>:</t>

        <t><list style="empty">
            <t>When this registry is modified, the YANG module
            "iana-bgp-l2-encaps" must be updated as defined in RFCXXXX.</t>
          </list></t>
      </section>

      <section title="Pseudowire Types">
        <t>This document defines the initial version of the IANA-maintained
        "iana-pseudowire-types" YANG module. IANA is requested to add this
        note for both modules:<list style="empty">
            <t>MPLS pseudowire types must not be directly added to the
            "iana-bgp-l2-encaps" YANG module. They must instead be
            respectively added to the "MPLS Pseudowire Types" registry <xref
            target="IANA-PW-Types"></xref>.</t>
          </list></t>

        <t>When a pseudowire type is added to the "iana-pseudowire-types"
        registry, a new "identity" statement must be added to the
        "iana-pseudowire-types" YANG module. The name of the "identity" is the
        lower-case of encapsulation name provided in the description. The
        "identity" statement should have the following sub-statements
        defined:</t>

        <t><list hangIndent="15" style="hanging">
            <t hangText="&quot;base&quot;:">Contains 'iana-pw-types'.</t>

            <t hangText="&quot;description&quot;:">Replicates the description
            from the registry.</t>

            <t hangText="&quot;reference&quot;:">Replicates the reference from
            the registry and add the title of the document.</t>
          </list></t>

        <t>Unassigned or reserved values are not present in the module.</t>

        <t>When the "iana-pseudowire-types" YANG module is updated, a new
        "revision" statement must be added in front of the existing revision
        statements.</t>

        <t>IANA is requested to add this note to <xref
        target="IANA-PW-Types"></xref>:</t>

        <t><list style="empty">
            <t>When this registry is modified, the YANG module
            "iana-pseudowire-types" must be updated as defined in RFCXXXX.</t>
          </list></t>
      </section>
    </section>
  </middle>

  <!--  *****BACK MATTER ***** -->

  <back>
    <!-- References split into informative and normative -->

    <!-- There are 2 ways to insert reference entries from the citation libraries:
     1. define an ENTITY at the top, and use "ampersand character"RFC2629; here (as shown)
     2. simply use a PI "less than character"?rfc include="reference.RFC.2119.xml"?> here
        (for I-Ds: include="reference.I-D.narten-iana-considerations-rfc2434bis.xml")

     Both are cited textually in the same manner: by using xref elements.
     If you use the PI option, xml2rfc will, by default, try to find included files in the same
     directory as the including file. You can also define the XML_LIBRARY environment variable
     with a value containing a set of directories to search.  These can be either in the local
     filing system or remote ones accessed by http (http://domain/dir/... ).-->

    <references title="Normative References">
      <!--?rfc include="http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml"?-->

      &RFC2119;

      &RFC3688;

      &RFC6242;

      &RFC8341;

      &RFC6020;

      &RFC6241;

      &RFC7950;

      &RFC8040;

      &RFC8466;

      &RFC8174;

      &RFC8214;

      &RFC7432;

      <?rfc include='reference.I-D.ietf-opsawg-vpn-common'?>

      <?rfc include='reference.RFC.8342'?>

      <?rfc include='reference.RFC.6074'?>

      <?rfc include='reference.RFC.7209'?>

      <?rfc include='reference.RFC.4761'?>

      <?rfc include='reference.RFC.6624'?>

      <?rfc include='reference.RFC.4762'?>

      <?rfc include='reference.RFC.7623'?>

      <?rfc include='reference.RFC.8365'?>

      <?rfc include='reference.RFC.8446'?>

      <?rfc include='reference.RFC.8077'?>

      <?rfc include='reference.RFC.6991'?>

      <?rfc include='reference.RFC.8294'?>

      <reference anchor="IANA-BGP-L2"
                 target="https://www.iana.org/assignments/bgp-parameters/bgp-parameters.xhtml#bgp-l2-encapsulation-types-registry">
        <front>
          <title>BGP Layer 2 Encapsulation Types</title>

          <author>
            <organization abbrev="IANA">Internet Assigned Numbers
            Authority</organization>
          </author>

          <date />
        </front>
      </reference>

      <reference anchor="IANA-PW-Types"
                 target="http://www.iana.org/assignments/pwe3-parameters/pwe3-parameters.xhtml#pwe3-parameters-2">
        <front>
          <title>MPLS Pseudowire Types Registry</title>

          <author fullname="IANA">
            <organization abbrev="IANA">Internet Assigned Numbers
            Authority</organization>
          </author>

          <date />
        </front>
      </reference>
    </references>

    <references title="Informative References">
      <!-- Here we use entities that we defined at the beginning. -->

      &RFC8309;

      &RFC8340;

      &RFC8453;

      <?rfc include='reference.RFC.3644'?>

      <?rfc include='reference.RFC.5880'?>

      <?rfc include='reference.RFC.8969'?>

      <?rfc include='reference.RFC.7297'?>

      <?rfc include='reference.I-D.ietf-teas-enhanced-vpn'?>

      <?rfc include='reference.I-D.ietf-teas-ietf-network-slices'?>

      <?rfc include='reference.I-D.ietf-idr-bgp-model'?>

      <?rfc include='reference.RFC.8345'?>

      <?rfc include='reference.RFC.4664'?>

      <?rfc include='reference.RFC.2507'?>

      <?rfc include='reference.RFC.2508'?>

      <?rfc include='reference.RFC.3032'?>

      <?rfc include='reference.RFC.3545'?>

      <?rfc include='reference.RFC.4446'?>

      <?rfc include='reference.RFC.4553'?>

      <?rfc include='reference.RFC.4448'?>

      <?rfc include='reference.RFC.4618'?>

      <?rfc include='reference.RFC.4619'?>

      <?rfc include='reference.RFC.4717'?>

      <?rfc include='reference.RFC.4816'?>

      <?rfc include='reference.RFC.4842'?>

      <?rfc include='reference.RFC.4863'?>

      <?rfc include='reference.RFC.4901'?>

      <?rfc include='reference.RFC.5086'?>

      <?rfc include='reference.RFC.5087'?>

      <?rfc include='reference.RFC.5143'?>

      <?rfc include='reference.RFC.5795'?>

      <?rfc include='reference.RFC.6307'?>

      <?rfc include='reference.RFC.8343'?>

      <?rfc include='reference.RFC.8519'?>

      <?rfc include='reference.RFC.7951'?>

      <reference anchor="PYANG" target="https://github.com/mbj4668/pyang">
        <front>
          <title>pyang</title>

          <author>
            <organization></organization>
          </author>

          <date month="November" year="2020" />
        </front>
      </reference>
    </references>

    <section title="Examples">
      <t>This section includes a non-exhaustive list of examples to illustrate
      the use of the L2NM.</t>

      <t>In the following subsections, only the content of the message bodies
      is shown using JSON notations <xref target="RFC7951"></xref>.</t>

      <section anchor="prec-example" title="VPN Network Access Precedence">
        <t>In reference to the example depicted in <xref target="p1"></xref>,
        an L2VPN service involves two VPN network accesses to sites that
        belong to the same customer.</t>

        <t><figure align="center" anchor="p1">
            <artwork><![CDATA[+--------------+                                   
|VPN-NODE      |                                
|           +--+-------+                          
|           | NET-ACC-2| Primacy                      
|           |          +------------------               
|           +--+-------+                                
|              |                       
|           +--+-------+                     
|           | NET-ACC-1| Backup                   
|           |          +------------------
|           +--+-------+                  
|              |                                    
+--------------+  
]]></artwork>
          </figure>In order to tag one of these VPN network accesses as
        "primary" and the other one as "backup", <xref target="p2"></xref>
        shows an excerpt of the corresponding L2NM configuration. In such as
        configuration, both accesses are bound to the same "group-id" and the
        "precedence" data node set as function of the intended role of each
        access (primary or backup).</t>

        <t><figure align="center" anchor="p2">
            <artwork><![CDATA[{
  "vpn-services": {
    "vpn-service": {
      "vpn-id": "Sample-Service",
      "vpn-nodes": {
        "vpn-node": {
          "vpn-node-id": "VPN-NODE",
          "vpn-network-accesses": {
            "vpn-network-access": [
              {
                "id": "NET-ACC-1",
                "group": {
                  "group-id": "1",
                  "precedence": "primary"
                }
              },
              {
                "id": "NET-ACC-1",
                "group": {
                  "group-id": "1",
                  "precedence": "backup"
                }
              }
            ]
          }
        }
      }
    }
  }
}]]></artwork>
          </figure></t>

        <t></t>
      </section>

      <section anchor="evpn-vpws-app" title="EVPN-VPWS Service Instance">
        <t><xref target="vpws-evpn-ex"></xref> depictes a sample architecture
        to offer VPWS-EVPN service between CE1 and CE2. Both CEs are
        multi-homed. BGP sessions are maintained between these PEs as per
        <xref target="RFC8214"></xref>. In this EVPN instance, an All-Active
        redundancy mode is used. </t>

        <t><figure align="center" anchor="vpws-evpn-ex"
            title="An Example of VPWS-EVPN">
            <artwork><![CDATA[                   |<--------- EVPN Instance ----------->|   
                   |                                     |  
             |     V                                     V  |
             |     +-----+      +--------------+   +-----+  |
      +----+ |     | PE1 |======|              |===| PE3 |  |    +----+
      |    +-------+     |      |              |   |     +-------+    |
      |    | |     +-----+      |              |   +-----+  |    |    |
      | CE1| |                  |     Core     |            |    |CE2 |
      |    | |     +-----+      |              |   +-----+  |    |    |
      |    +-------+     |      |              |   |     +-------+    |
      +----+ |     | PE2 |======|              |===| PE4 |  |    +----+
           ^  ESI1 +-----+      +--------------+   +-----+  ESI2    ^
           |                                                        |
           |<---------------- Emulated Service -------------------->|]]></artwork>
          </figure></t>

        <t><xref target="vpws-evpn-ex"></xref> shows a simplified
        configuration to illustrate the use of the L2NM to configured
        VPWS-EVPN instance. </t>

        <t><figure align="center" anchor="l2nm-vpws-evpn">
            <artwork><![CDATA[{
  "ietf-l2vpn-ntw:vpn-services": {
    "vpn-service": [
      {
        "vpn-id": "vpws15432855",
        "description": "Sample EVPN-VPWS",
        "customer-name": "customer_15432855",
        "vpn-type": "vpn-common:vpws-evpn",
        "bgp-ad-enabled": true,
        "signaling-type": "vpn-common:evpn-bgp",
        "global-parameters-profiles": {
          "global-parameters-profile": [
            {
              "profile-id": "simple-profile",
              "local-autonomous-system": 65550,
              "rd-suffix": "1",
              "vpn-targets": {
                "vpn-target": [
                  {
                    "id": "1",
                    "route-targets": [
                      "0:65550:1"
                    ],
                    "route-target-type": "both"
                  }
                ]
              }
            }
          ]
        },
        "ethernet-segments": {
          "ethernet-segment": [
            {
              "name": "esi1",
              "ethernet-segment-identifier": "00:11:11:11:11:11:11:11:11:11",
              "esi-redundancy-mode": "all-active"
            },
            {
              "name": "esi2",
              "ethernet-segment-identifier": "00:22:22:22:22:22:22:22:22:22",
              "esi-redundancy-mode": "all-active"
            }
          ]
        },
        "vpn-node": [
          {
            "vpn-node-id": "pe1",
            "ne-id": "198.51.100.1",
            "active-global-parameters-profile": {
              "global-parameters-profile": [
                {
                  "profile-id": "simple-profile"
                }
              ]
            },
            "vpn-network-access": [
              {
                "id": "1/1/1.1",
                "port-id": "1/1/1",
                "description": "Interface to CE1",
                "global-parameters-profile": "simple-profile",
                "status": {
                  "admin-status": {
                    "status": "vpn-common:admin-state-up"
                  }
                },
                "connection": {
                  "encapsulation": {
                    "type": "dot1q",
                    "dot1q": {
                      "cvlan-id": 1
                    }
                  }
                },
                "vpws-service-instance": {
                  "local-vpws-service-instance": 1111,
                  "remote-vpws-service-instance": 1112
                },
                "group": [
                  {
                    "group-id": "gr1",
                    "ethernet-segment-identifier": "esi1"
                  }
                ]
              }
            ]
          },
          {
            "vpn-node-id": "pe2",
            "ne-id": "198.51.100.2",
            "active-global-parameters-profile": {
              "global-parameters-profile": [
                {
                  "profile-id": "simple-profile"
                }
              ]
            },
            "vpn-network-access": [
              {
                "id": "1/1/1.1",
                "port-id": "1/1/1",
                "description": "Interface to CE1",
                "global-parameters-profile": "simple-profile",
                "status": {
                  "admin-status": {
                    "status": "vpn-common:admin-state-up"
                  }
                },
                "connection": {
                  "encapsulation": {
                    "type": "dot1q",
                    "dot1q": {
                      "cvlan-id": 1
                    }
                  }
                },
                "vpws-service-instance": {
                  "local-vpws-service-instance": 1111,
                  "remote-vpws-service-instance": 1112
                },
                "group": [
                  {
                    "group-id": "gr1",
                    "ethernet-segment-identifier": "esi1"
                  }
                ]
              }
            ]
          },
          {
            "vpn-node-id": "pe3",
            "ne-id": "198.51.100.3",
            "active-global-parameters-profile": {
              "global-parameters-profile": [
                {
                  "profile-id": "simple-profile"
                }
              ]
            },
            "vpn-network-access": [
              {
                "id": "1/1/1.1",
                "port-id": "1/1/1",
                "description": "Interface to CE2",
                "global-parameters-profile": "simple-profile",
                "status": {
                  "admin-status": {
                    "status": "vpn-common:admin-state-up"
                  }
                },
                "connection": {
                  "encapsulation": {
                    "type": "dot1q",
                    "dot1q": {
                      "cvlan-id": 1
                    }
                  }
                },
                "vpws-service-instance": {
                  "local-vpws-service-instance": 1112,
                  "remote-vpws-service-instance": 1111
                },
                "group": [
                  {
                    "group-id": "gr1",
                    "ethernet-segment-identifier": "esi2"
                  }
                ]
              }
            ]
          },
          {
            "vpn-node-id": "pe4",
            "ne-id": "198.51.100.4",
            "active-global-parameters-profile": {
              "global-parameters-profile": [
                {
                  "profile-id": "simple-profile"
                }
              ]
            },
            "vpn-network-access": [
              {
                "id": "1/1/1.1",
                "port-id": "1/1/1",
                "description": "Interface to CE2",
                "global-parameters-profile": "simple-profile",
                "status": {
                  "admin-status": {
                    "status": "vpn-common:admin-state-up"
                  }
                },
                "connection": {
                  "encapsulation": {
                    "type": "dot1q",
                    "dot1q": {
                      "cvlan-id": 1
                    }
                  }
                },
                "vpws-service-instance": {
                  "local-vpws-service-instance": 1112,
                  "remote-vpws-service-instance": 1111
                },
                "group": [
                  {
                    "group-id": "gr1",
                    "ethernet-segment-identifier": "esi2"
                  }
                ]
              }
            ]
          }
        ]
      }
    ]
  }
}

]]></artwork>
          </figure></t>

        <t></t>
      </section>

      <section anchor="auto-ex" title="Automatic ESI Assignment">
        <t>This section provides an example to illustrate how the L2NM can be
        used to manage ESI auto-assignment. We consider the sample EVPN
        service delivered using the architecture depicted in <xref
        target="auto-esi-ex"></xref>.</t>

        <t><figure align="center" anchor="auto-esi-ex"
            title="An Example of Automatic ESI Assignment ">
            <artwork><![CDATA[ 
             ES      
             |     +-----+      +--------------+   +-----+    
      +----+ |     | PE1 |======|              |===| PE3 |       +----+
      |    +-------+     |      |              |   |     +-------+ CE3|
      |    | |     +-----+      |              |   +-----+       +----+
      | CE1| |                  |     Core     |                 
      |    | |     +-----+      |              |   +-----+       +----+
      |    +-------+     |      |              |   |     +-------+ CE2|
      +----+ |     | PE2 |======|              |===| PE4 |       +----+
           LACP    +-----+      +--------------+   +-----+          
 ]]></artwork>
          </figure></t>

        <t><xref target="auto-lacp"></xref> shows how the L2NM is used to
        instruct both PE1 and PE2 to auto-assign the ESI to identify the ES
        used with CE1. In this example, we suppose that LACP is enabled and
        that a Type 1 (T=0x01) is used as per Section 5 of <xref
        target="RFC7432"></xref>. Note that this example does not include all
        the details to configure the EVPN service, but focuses only on the ESI
        management part.</t>

        <t><figure align="center" anchor="auto-lacp">
            <artwork><![CDATA[{
  "ietf-l2vpn-ntw:vpn-services": {
    "vpn-service": [
      {
        "vpn-id": "auto-esi-lacp",
        "description": "Sample to illustrate auto-ESI",
        "vpn-type": "vpn-common:vpls-evpn",
        "ethernet-segments": {
          "ethernet-segment": [
            {
              "name": "esi1",
              "esi-type": "esi-type-1",
              "esi-redundancy-mode": "all-active"
            }
          ]
        },
        "vpn-node": [
          {
            "vpn-node-id": "pe1",
            "ne-id": "198.51.100.1",
            "vpn-network-access": [
              {
                "id": "1/1/1.1",
                "port-id": "1/1/1",
                "description": "Interface to CE1",
                "global-parameters-profile": "simple-profile",
                "status": {
                  "admin-status": {
                    "status": "vpn-common:admin-state-up"
                  }
                },
                "connection": {
                  "lag-interface": {
                    "lag-interface": [
                      {
                        "lag-interface-number": 1,
                        "lacp": {
                          "lacp-state": true,
                          "system-id": "11:00:11:00:11:11",
                          "admin-key": 154
                        }
                      }
                    ]
                  }
                },
                "group": [
                  {
                    "group-id": "gr1",
                    "ethernet-segment-identifier": "esi1"
                  }
                ]
              }
            ]
          },
          {
            "vpn-node-id": "pe2",
            "ne-id": "198.51.100.2",
            "vpn-network-access": [
              {
                "id": "2/2/2.5",
                "port-id": "2/2/2",
                "description": "Interface to CE1",
                "status": {
                  "admin-status": {
                    "status": "vpn-common:admin-state-up"
                  }
                },
                "connection": {
                  "lag-interface": {
                    "lag-interface": [
                      {
                        "lag-interface-number": 1,
                        "lacp": {
                          "lacp-state": true,
                          "system-id": "11:00:11:00:11:11",
                          "admin-key": 154
                        }
                      }
                    ]
                  }
                },
                "group": [
                  {
                    "group-id": "gr1",
                    "ethernet-segment-identifier": "esi1"
                  }
                ]
              }
            ]
          }
        ]
      }
    ]
  }
}

]]></artwork>
          </figure></t>

        <t>The auto-assigned ESI can be retrieved using, e.g., a GET RESTCONF
        method. The assigned value will be then returned as shown in the
        'esi-auto' data node in <xref target="auto-lacp-response"></xref>.</t>

        <t><figure align="center" anchor="auto-lacp-response">
            <artwork><![CDATA[{
  "ietf-l2vpn-ntw:vpn-services": {
    "vpn-service": [
      {
        "vpn-id": "auto-esi-lacp",
        "description": "Sample to illustrate auto-ESI",
        "vpn-type": "vpn-common:vpls-evpn",
        "ethernet-segments": {
          "ethernet-segment": [
            {
              "name": "esi1",
              "esi-type": "esi-type-1",
              "esi-auto": {
                "auto-ethernet-segment-identifier": "01:11:00:11:00:11:11:9A:00:00"
              },
              "esi-redundancy-mode": "all-active"
            }
          ]
        },
        "vpn-node": [
          {
            "vpn-node-id": "pe1",
            "ne-id": "198.51.100.1",
            "vpn-network-access": [
              {
                "id": "1/1/1.1",
                "port-id": "1/1/1",
                "description": "Interface to CE1",
                "global-parameters-profile": "simple-profile",
                "status": {
                  "admin-status": {
                    "status": "vpn-common:admin-state-up"
                  }
                },
                "connection": {
                  "lag-interface": {
                    "lag-interface": [
                      {
                        "lag-interface-number": 1,
                        "lacp": {
                          "lacp-state": true,
                          "system-id": "11:00:11:00:11:11",
                          "admin-key": 154
                        }
                      }
                    ]
                  }
                },
                "group": [
                  {
                    "group-id": "gr1",
                    "ethernet-segment-identifier": "esi1"
                  }
                ]
              }
            ]
          },
          {
            "vpn-node-id": "pe2",
            "ne-id": "198.51.100.2",
            "vpn-network-access": [
              {
                "id": "2/2/2.5",
                "port-id": "2/2/2",
                "description": "Interface to CE1",
                "status": {
                  "admin-status": {
                    "status": "vpn-common:admin-state-up"
                  }
                },
                "connection": {
                  "lag-interface": {
                    "lag-interface": [
                      {
                        "lag-interface-number": 1,
                        "lacp": {
                          "lacp-state": true,
                          "system-id": "11:00:11:00:11:11",
                          "admin-key": 154
                        }
                      }
                    ]
                  }
                },
                "group": [
                  {
                    "group-id": "gr1",
                    "ethernet-segment-identifier": "esi1"
                  }
                ]
              }
            ]
          }
        ]
      }
    ]
  }
}

]]></artwork>
          </figure></t>
      </section>
    </section>

    <section anchor="bet" title="Initial BGP Layer 2 Encapsulation Types">
      <t><figure>
          <artwork align="center"><![CDATA[Value Description                       Reference
===== ================================  =========
1     Frame Relay                       [RFC4446]
2     ATM AAL5 SDU VCC transport        [RFC4446]
3     ATM transparent cell transport    [RFC4816]
4     Ethernet (VLAN) Tagged Mode       [RFC4448]
5     Ethernet Raw Mode                 [RFC4448]
6     Cisco HDLC                        [RFC4618]
7     PPP                               [RFC4618]
8     SONET/SDH Circuit Emulation       [RFC4842]
      Service
9     ATM n-to-one VCC cell transport   [RFC4717]
10    ATM n-to-one VPC cell transport   [RFC4717]
11    IP Layer 2 Transport              [RFC3032]
15    Frame Relay Port mode             [RFC4619]
17    Structure-agnostic E1 over packet [RFC4553]
18    Structure-agnostic T1 (DS1) over  [RFC4553]
      packet
19    VPLS                              [RFC4761]
20    Structure-agnostic T3 (DS3) over  [RFC4553]
      packet
21    Nx64kbit/s Basic Service using    [RFC5086]
      Structure-aware
25    Frame Relay DLCI                  [RFC4619]
40    Structure-agnostic E3 over packet [RFC4553]
41    Octet-aligned payload for         [RFC4553]
      Structure-agnostic DS1 circuits
42    E1 Nx64kbit/s with CAS using      [RFC5086]
      Structure-aware
43    DS1 (ESF) Nx64kbit/s with CAS     [RFC5086]
      using Structure-aware
44    DS1 (SF) Nx64kbit/s with CAS      [RFC5086]
      using Structure-aware]]></artwork>
        </figure></t>
    </section>

    <section anchor="pwt" title="Initial PW Types">
      <t><figure align="center">
          <artwork align="center"><![CDATA[PW Type Description                       Reference
======= ================================  =========
0x0001  Frame Relay DLCI                  [RFC4619]
0x0002  ATM AAL5 SDU VCC transport 
0x0003  ATM transparent cell transport    [RFC4717]
0x0004  Ethernet Tagged Mode              [RFC4448]
0x0005  Ethernet                          [RFC4448]
0x0006  HDLC                              [RFC4618]
0x0007  PPP                               [RFC4618]
0x0008  SONET/SDH Circuit Emulation 
        Service Over MPLS Encapsulation   [RFC5143]
0x0009  ATM n-to-one VCC cell transport   [RFC4717]
0x000A  ATM n-to-one VPC cell transport   [RFC4717]
0x000B  IP Layer2 Transport               [RFC3032]
0x000C  ATM one-to-one VCC Cell Mode      [RFC4717]
0x000D  ATM one-to-one VPC Cell Mode      [RFC4717]
0x000E  ATM AAL5 PDU VCC transport        [RFC4717]
0x000F  Frame-Relay Port mode             [RFC4619]
0x0010  SONET/SDH Circuit Emulation       [RFC4842]
        Reference Packet                         
0x0011  Structure-agnostic E1 over        [RFC4553]
        Packet
0x0012  Structure-agnostic T1 (DS1)       [RFC4553]
        over Packet
0x0013  Structure-agnostic E3 over        [RFC4553]
        Packet
0x0014  Structure-agnostic T3 (DS3)       [RFC4553]
        over Packet
0x0015  CESoPSN basic mode                [RFC5086]
0x0016  TDMoIP AAL1 Mode                  [RFC5087]
0x0017  CESoPSN TDM with CAS              [RFC5086]
0x0018  TDMoIP AAL2 Mode                  [RFC5087]
0x0019  Frame Relay DLCI                  [RFC4619]
0x001A  ROHC Transport Header-compressed  [RFC5795][RFC4901]
        Packets
0x001B  ECRTP Transport Header-compressed [RFC3545][RFC4901]
        Packets
0x001C  IPHC Transport Header-compressed  [RFC2507][RFC4901]
        Packets
0x001D  cRTP Transport Header-compressed  [RFC2508][RFC4901]
        Packets
0x001E  ATM VP Virtual Trunk 
0x001F  FC Port Mode                      [RFC6307]
0x7FFF  Wildcard                          [RFC4863]]]></artwork>
        </figure></t>
    </section>

    <section numbered="false" title="Acknowledgements" toc="default">
      <t>During the discussions of this work, helpful comments, suggestions,
      and reviews were received from: Sergio Belotti, Italo Busi, Miguel Cros
      Cecilia, Joe Clarke, Dhruv Dhody, Adrian Farrel, Roque Gagliano,
      Christian Jacquenet, Kireeti Kompella, Julian Lucek, Erez Segev and Tom
      Petch. Many thanks to them.<vspace blankLines="1" />Luay Jalil, Jichun
      Ma, Daniel King, and Zhang Guiyu contributed to an early version of this
      document.<vspace blankLines="1" />Thanks to Yingzhen Qu for the rtgdir
      review.</t>
    </section>

    <section numbered="false" title="Contributors" toc="default">
      <t>Victor Lopez<vspace blankLines="0" />Nokia<vspace blankLines="0" />
      Email: victor.lopez@nokia.com</t>

      <t>Qin Wu<vspace blankLines="0" /> Huawei<vspace blankLines="0" />
      Email: bill.wu@huawei.com<vspace blankLines="1" />Raul Arco<vspace
      blankLines="0" /> Nokia<vspace blankLines="0" /> Email:
      raul.arco@nokia.com</t>
    </section>
  </back>
</rfc>
